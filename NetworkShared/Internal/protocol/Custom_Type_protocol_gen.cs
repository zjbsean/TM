//source signature: [44-07-95-1F-3E-D8-40-8B-9A-17-7B-9D-68-AD-03-5F]
// Autogenerated at 2017/2/18 17:55:57
// Created by [CodeGenerator Library:1.7.3.2014.04.20.15.19] FOR Client Protocol.
// Don't manully change this code unless you have to, all changes will be lost next time code is generated.
// Copyright ideadynamo.com 2008-2012.
namespace com.tieao.mmo.CustomTypeInProtocol.client
{
    using System;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using com.ideadynamo.foundation;
    using com.ideadynamo.foundation.buffer;
    using com.tieao.mmo.CustomTypeInProtocol;
    
    // set com.tieao.mmo.CustomTypeInProtocol
    /*Reference Codes
    
    [Serializable]
    public class TIDStrKeyValue
    {
      public int ID;
      public string Key;
      public string Value;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( ID);
        byteArray.writeUTF( Key);
        byteArray.writeUTF( Value);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        ID = byteArray.readDynamicsInt();
        Key = byteArray.readUTF();
        Value = byteArray.readUTF();
        
      }
      
      public static TIDStrKeyValue SReadFromByteArray(ByteArray byteArray)
      {
          TIDStrKeyValue elem = new TIDStrKeyValue ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TIDStrKeyValue:{");
          
          sb.AppendFormat(@" ID  = ""{0}"",",ID );
          
          sb.AppendFormat(@" Key  = ""{0}"",",Key );
          
          sb.AppendFormat(@" Value  = ""{0}"",",Value );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TIntKeyValue
    {
      public int key;
      public int value;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( key);
        byteArray.writeDynamicsInt( value);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        key = byteArray.readDynamicsInt();
        value = byteArray.readDynamicsInt();
        
      }
      
      public static TIntKeyValue SReadFromByteArray(ByteArray byteArray)
      {
          TIntKeyValue elem = new TIntKeyValue ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TIntKeyValue:{");
          
          sb.AppendFormat(@" key  = ""{0}"",",key );
          
          sb.AppendFormat(@" value  = ""{0}"",",value );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TStrKeyValue
    {
      public string key;
      public string value;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( key);
        byteArray.writeUTF( value);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        key = byteArray.readUTF();
        value = byteArray.readUTF();
        
      }
      
      public static TStrKeyValue SReadFromByteArray(ByteArray byteArray)
      {
          TStrKeyValue elem = new TStrKeyValue ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TStrKeyValue:{");
          
          sb.AppendFormat(@" key  = ""{0}"",",key );
          
          sb.AppendFormat(@" value  = ""{0}"",",value );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class PtGuid
    {
      public int a;
      public short b;
      public short c;
      public byte d;
      public byte e;
      public byte f;
      public byte g;
      public byte h;
      public byte i;
      public byte j;
      public byte k;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( a);
        byteArray.writeShort( b);
        byteArray.writeShort( c);
        byteArray.writeByte( d);
        byteArray.writeByte( e);
        byteArray.writeByte( f);
        byteArray.writeByte( g);
        byteArray.writeByte( h);
        byteArray.writeByte( i);
        byteArray.writeByte( j);
        byteArray.writeByte( k);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        a = byteArray.readDynamicsInt();
        b = byteArray.readShort();
        c = byteArray.readShort();
        d = byteArray.readByte();
        e = byteArray.readByte();
        f = byteArray.readByte();
        g = byteArray.readByte();
        h = byteArray.readByte();
        i = byteArray.readByte();
        j = byteArray.readByte();
        k = byteArray.readByte();
        
      }
      
      public static PtGuid SReadFromByteArray(ByteArray byteArray)
      {
          PtGuid elem = new PtGuid ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("PtGuid:{");
          
          sb.AppendFormat(@" a  = ""{0}"",",a );
          
          sb.AppendFormat(@" b  = ""{0}"",",b );
          
          sb.AppendFormat(@" c  = ""{0}"",",c );
          
          sb.AppendFormat(@" d  = ""{0}"",",d );
          
          sb.AppendFormat(@" e  = ""{0}"",",e );
          
          sb.AppendFormat(@" f  = ""{0}"",",f );
          
          sb.AppendFormat(@" g  = ""{0}"",",g );
          
          sb.AppendFormat(@" h  = ""{0}"",",h );
          
          sb.AppendFormat(@" i  = ""{0}"",",i );
          
          sb.AppendFormat(@" j  = ""{0}"",",j );
          
          sb.AppendFormat(@" k  = ""{0}"",",k );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TItem
    {
      public long id;
      public string name;
      public string desc;
      public TStrList marks;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeLong( id);
        byteArray.writeUTF( name);
        byteArray.writeUTF( desc);
         marks.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readLong();
        name = byteArray.readUTF();
        desc = byteArray.readUTF();
        marks = new TStrList();
			marks.ReadFromByteArray(byteArray);
        
      }
      
      public static TItem SReadFromByteArray(ByteArray byteArray)
      {
          TItem elem = new TItem ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TItem:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" name  = ""{0}"",",name );
          
          sb.AppendFormat(@" desc  = ""{0}"",",desc );
          
          sb.AppendFormat(@" marks  = ""{0}"",",marks );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TAccount
    {
      public string account;
      public string token;
      public string showName;
      public int power;
      public string createTime;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( account);
        byteArray.writeUTF( token);
        byteArray.writeUTF( showName);
        byteArray.writeDynamicsInt( power);
        byteArray.writeUTF( createTime);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        account = byteArray.readUTF();
        token = byteArray.readUTF();
        showName = byteArray.readUTF();
        power = byteArray.readDynamicsInt();
        createTime = byteArray.readUTF();
        
      }
      
      public static TAccount SReadFromByteArray(ByteArray byteArray)
      {
          TAccount elem = new TAccount ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TAccount:{");
          
          sb.AppendFormat(@" account  = ""{0}"",",account );
          
          sb.AppendFormat(@" token  = ""{0}"",",token );
          
          sb.AppendFormat(@" showName  = ""{0}"",",showName );
          
          sb.AppendFormat(@" power  = ""{0}"",",power );
          
          sb.AppendFormat(@" createTime  = ""{0}"",",createTime );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TBusinessItem
    {
      public long itemID;
      public int count;
      public string mark;
      public float price;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeLong( itemID);
        byteArray.writeDynamicsInt( count);
        byteArray.writeUTF( mark);
        byteArray.writeFloat( price);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        itemID = byteArray.readLong();
        count = byteArray.readDynamicsInt();
        mark = byteArray.readUTF();
        price = byteArray.readFloat();
        
      }
      
      public static TBusinessItem SReadFromByteArray(ByteArray byteArray)
      {
          TBusinessItem elem = new TBusinessItem ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TBusinessItem:{");
          
          sb.AppendFormat(@" itemID  = ""{0}"",",itemID );
          
          sb.AppendFormat(@" count  = ""{0}"",",count );
          
          sb.AppendFormat(@" mark  = ""{0}"",",mark );
          
          sb.AppendFormat(@" price  = ""{0}"",",price );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TBuyerOrder
    {
      public long buyerID;
      public string orderID;
      public string makeTime;
      public TBusinessItemList buyItems;
      public int state;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeLong( buyerID);
        byteArray.writeUTF( orderID);
        byteArray.writeUTF( makeTime);
         buyItems.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( state);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        buyerID = byteArray.readLong();
        orderID = byteArray.readUTF();
        makeTime = byteArray.readUTF();
        buyItems = new TBusinessItemList();
			buyItems.ReadFromByteArray(byteArray);
        state = byteArray.readDynamicsInt();
        
      }
      
      public static TBuyerOrder SReadFromByteArray(ByteArray byteArray)
      {
          TBuyerOrder elem = new TBuyerOrder ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TBuyerOrder:{");
          
          sb.AppendFormat(@" buyerID  = ""{0}"",",buyerID );
          
          sb.AppendFormat(@" orderID  = ""{0}"",",orderID );
          
          sb.AppendFormat(@" makeTime  = ""{0}"",",makeTime );
          
          sb.AppendFormat(@" buyItems  = ""{0}"",",buyItems );
          
          sb.AppendFormat(@" state  = ""{0}"",",state );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TSellerOrder
    {
      public long sellerID;
      public string orderID;
      public string theBuyerOrderID;
      public string makeTime;
      public TBusinessItemList sellItems;
      public int state;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeLong( sellerID);
        byteArray.writeUTF( orderID);
        byteArray.writeUTF( theBuyerOrderID);
        byteArray.writeUTF( makeTime);
         sellItems.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( state);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        sellerID = byteArray.readLong();
        orderID = byteArray.readUTF();
        theBuyerOrderID = byteArray.readUTF();
        makeTime = byteArray.readUTF();
        sellItems = new TBusinessItemList();
			sellItems.ReadFromByteArray(byteArray);
        state = byteArray.readDynamicsInt();
        
      }
      
      public static TSellerOrder SReadFromByteArray(ByteArray byteArray)
      {
          TSellerOrder elem = new TSellerOrder ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TSellerOrder:{");
          
          sb.AppendFormat(@" sellerID  = ""{0}"",",sellerID );
          
          sb.AppendFormat(@" orderID  = ""{0}"",",orderID );
          
          sb.AppendFormat(@" theBuyerOrderID  = ""{0}"",",theBuyerOrderID );
          
          sb.AppendFormat(@" makeTime  = ""{0}"",",makeTime );
          
          sb.AppendFormat(@" sellItems  = ""{0}"",",sellItems );
          
          sb.AppendFormat(@" state  = ""{0}"",",state );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TBuyer
    {
      public long id;
      public string name;
      public string desc;
      public string country;
      public string address;
      public string tel;
      public TStrKeyValueList linkMans;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeLong( id);
        byteArray.writeUTF( name);
        byteArray.writeUTF( desc);
        byteArray.writeUTF( country);
        byteArray.writeUTF( address);
        byteArray.writeUTF( tel);
         linkMans.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readLong();
        name = byteArray.readUTF();
        desc = byteArray.readUTF();
        country = byteArray.readUTF();
        address = byteArray.readUTF();
        tel = byteArray.readUTF();
        linkMans = new TStrKeyValueList();
			linkMans.ReadFromByteArray(byteArray);
        
      }
      
      public static TBuyer SReadFromByteArray(ByteArray byteArray)
      {
          TBuyer elem = new TBuyer ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TBuyer:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" name  = ""{0}"",",name );
          
          sb.AppendFormat(@" desc  = ""{0}"",",desc );
          
          sb.AppendFormat(@" country  = ""{0}"",",country );
          
          sb.AppendFormat(@" address  = ""{0}"",",address );
          
          sb.AppendFormat(@" tel  = ""{0}"",",tel );
          
          sb.AppendFormat(@" linkMans  = ""{0}"",",linkMans );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TSeller
    {
      public long id;
      public string name;
      public string desc;
      public string country;
      public string address;
      public string tel;
      public TStrKeyValueList linkMans;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeLong( id);
        byteArray.writeUTF( name);
        byteArray.writeUTF( desc);
        byteArray.writeUTF( country);
        byteArray.writeUTF( address);
        byteArray.writeUTF( tel);
         linkMans.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readLong();
        name = byteArray.readUTF();
        desc = byteArray.readUTF();
        country = byteArray.readUTF();
        address = byteArray.readUTF();
        tel = byteArray.readUTF();
        linkMans = new TStrKeyValueList();
			linkMans.ReadFromByteArray(byteArray);
        
      }
      
      public static TSeller SReadFromByteArray(ByteArray byteArray)
      {
          TSeller elem = new TSeller ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TSeller:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" name  = ""{0}"",",name );
          
          sb.AppendFormat(@" desc  = ""{0}"",",desc );
          
          sb.AppendFormat(@" country  = ""{0}"",",country );
          
          sb.AppendFormat(@" address  = ""{0}"",",address );
          
          sb.AppendFormat(@" tel  = ""{0}"",",tel );
          
          sb.AppendFormat(@" linkMans  = ""{0}"",",linkMans );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TShipping
    {
      public long id;
      public string name;
      public string desc;
      public string country;
      public string address;
      public string tel;
      public TStrKeyValueList linkMans;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeLong( id);
        byteArray.writeUTF( name);
        byteArray.writeUTF( desc);
        byteArray.writeUTF( country);
        byteArray.writeUTF( address);
        byteArray.writeUTF( tel);
         linkMans.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readLong();
        name = byteArray.readUTF();
        desc = byteArray.readUTF();
        country = byteArray.readUTF();
        address = byteArray.readUTF();
        tel = byteArray.readUTF();
        linkMans = new TStrKeyValueList();
			linkMans.ReadFromByteArray(byteArray);
        
      }
      
      public static TShipping SReadFromByteArray(ByteArray byteArray)
      {
          TShipping elem = new TShipping ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TShipping:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" name  = ""{0}"",",name );
          
          sb.AppendFormat(@" desc  = ""{0}"",",desc );
          
          sb.AppendFormat(@" country  = ""{0}"",",country );
          
          sb.AppendFormat(@" address  = ""{0}"",",address );
          
          sb.AppendFormat(@" tel  = ""{0}"",",tel );
          
          sb.AppendFormat(@" linkMans  = ""{0}"",",linkMans );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TIntList
    {
      private List<int> _elements = new List<int>();
      //private int[] _elements;
      
      //public int[] GetElements()
      public List<int> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<int>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(int element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              byteArray.writeDynamicsInt(_elements[i]); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (byteArray.readDynamicsInt());
          }
      }
      
      public static TIntList SReadFromByteArray(ByteArray byteArray)
      {
            TIntList result = new TIntList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TIntList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TStrList
    {
      private List<string> _elements = new List<string>();
      //private string[] _elements;
      
      //public string[] GetElements()
      public List<string> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<string>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(string element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              byteArray.writeUTF(_elements[i]); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (byteArray.readUTF());
          }
      }
      
      public static TStrList SReadFromByteArray(ByteArray byteArray)
      {
            TStrList result = new TStrList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TStrList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TByteList
    {
      private List<byte> _elements = new List<byte>();
      //private byte[] _elements;
      
      //public byte[] GetElements()
      public List<byte> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<byte>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(byte element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              byteArray.writeByte(_elements[i]); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (byteArray.readByte());
          }
      }
      
      public static TByteList SReadFromByteArray(ByteArray byteArray)
      {
            TByteList result = new TByteList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TByteList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TLongList
    {
      private List<long> _elements = new List<long>();
      //private long[] _elements;
      
      //public long[] GetElements()
      public List<long> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<long>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(long element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              byteArray.writeLong(_elements[i]); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (byteArray.readLong());
          }
      }
      
      public static TLongList SReadFromByteArray(ByteArray byteArray)
      {
            TLongList result = new TLongList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TLongList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TIDStrKeyValueList
    {
      private List<TIDStrKeyValue> _elements = new List<TIDStrKeyValue>();
      //private TIDStrKeyValue[] _elements;
      
      //public TIDStrKeyValue[] GetElements()
      public List<TIDStrKeyValue> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TIDStrKeyValue>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TIDStrKeyValue element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TIDStrKeyValue.SReadFromByteArray(byteArray));
          }
      }
      
      public static TIDStrKeyValueList SReadFromByteArray(ByteArray byteArray)
      {
            TIDStrKeyValueList result = new TIDStrKeyValueList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TIDStrKeyValueList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TIntKeyValueList
    {
      private List<TIntKeyValue> _elements = new List<TIntKeyValue>();
      //private TIntKeyValue[] _elements;
      
      //public TIntKeyValue[] GetElements()
      public List<TIntKeyValue> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TIntKeyValue>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TIntKeyValue element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TIntKeyValue.SReadFromByteArray(byteArray));
          }
      }
      
      public static TIntKeyValueList SReadFromByteArray(ByteArray byteArray)
      {
            TIntKeyValueList result = new TIntKeyValueList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TIntKeyValueList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TStrKeyValueList
    {
      private List<TStrKeyValue> _elements = new List<TStrKeyValue>();
      //private TStrKeyValue[] _elements;
      
      //public TStrKeyValue[] GetElements()
      public List<TStrKeyValue> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TStrKeyValue>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TStrKeyValue element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TStrKeyValue.SReadFromByteArray(byteArray));
          }
      }
      
      public static TStrKeyValueList SReadFromByteArray(ByteArray byteArray)
      {
            TStrKeyValueList result = new TStrKeyValueList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TStrKeyValueList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class PtGuidList
    {
      private List<PtGuid> _elements = new List<PtGuid>();
      //private PtGuid[] _elements;
      
      //public PtGuid[] GetElements()
      public List<PtGuid> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<PtGuid>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(PtGuid element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (PtGuid.SReadFromByteArray(byteArray));
          }
      }
      
      public static PtGuidList SReadFromByteArray(ByteArray byteArray)
      {
            PtGuidList result = new PtGuidList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("PtGuidList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TItemList
    {
      private List<TItem> _elements = new List<TItem>();
      //private TItem[] _elements;
      
      //public TItem[] GetElements()
      public List<TItem> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TItem>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TItem element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TItem.SReadFromByteArray(byteArray));
          }
      }
      
      public static TItemList SReadFromByteArray(ByteArray byteArray)
      {
            TItemList result = new TItemList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TItemList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TAccountList
    {
      private List<TAccount> _elements = new List<TAccount>();
      //private TAccount[] _elements;
      
      //public TAccount[] GetElements()
      public List<TAccount> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TAccount>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TAccount element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TAccount.SReadFromByteArray(byteArray));
          }
      }
      
      public static TAccountList SReadFromByteArray(ByteArray byteArray)
      {
            TAccountList result = new TAccountList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TAccountList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TBusinessItemList
    {
      private List<TBusinessItem> _elements = new List<TBusinessItem>();
      //private TBusinessItem[] _elements;
      
      //public TBusinessItem[] GetElements()
      public List<TBusinessItem> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TBusinessItem>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TBusinessItem element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TBusinessItem.SReadFromByteArray(byteArray));
          }
      }
      
      public static TBusinessItemList SReadFromByteArray(ByteArray byteArray)
      {
            TBusinessItemList result = new TBusinessItemList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TBusinessItemList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TBuyerOrderList
    {
      private List<TBuyerOrder> _elements = new List<TBuyerOrder>();
      //private TBuyerOrder[] _elements;
      
      //public TBuyerOrder[] GetElements()
      public List<TBuyerOrder> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TBuyerOrder>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TBuyerOrder element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TBuyerOrder.SReadFromByteArray(byteArray));
          }
      }
      
      public static TBuyerOrderList SReadFromByteArray(ByteArray byteArray)
      {
            TBuyerOrderList result = new TBuyerOrderList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TBuyerOrderList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TSellerOrderList
    {
      private List<TSellerOrder> _elements = new List<TSellerOrder>();
      //private TSellerOrder[] _elements;
      
      //public TSellerOrder[] GetElements()
      public List<TSellerOrder> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TSellerOrder>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TSellerOrder element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TSellerOrder.SReadFromByteArray(byteArray));
          }
      }
      
      public static TSellerOrderList SReadFromByteArray(ByteArray byteArray)
      {
            TSellerOrderList result = new TSellerOrderList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TSellerOrderList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TBuyerList
    {
      private List<TBuyer> _elements = new List<TBuyer>();
      //private TBuyer[] _elements;
      
      //public TBuyer[] GetElements()
      public List<TBuyer> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TBuyer>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TBuyer element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TBuyer.SReadFromByteArray(byteArray));
          }
      }
      
      public static TBuyerList SReadFromByteArray(ByteArray byteArray)
      {
            TBuyerList result = new TBuyerList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TBuyerList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TSellerList
    {
      private List<TSeller> _elements = new List<TSeller>();
      //private TSeller[] _elements;
      
      //public TSeller[] GetElements()
      public List<TSeller> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TSeller>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TSeller element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TSeller.SReadFromByteArray(byteArray));
          }
      }
      
      public static TSellerList SReadFromByteArray(ByteArray byteArray)
      {
            TSellerList result = new TSellerList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TSellerList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TShippingList
    {
      private List<TShipping> _elements = new List<TShipping>();
      //private TShipping[] _elements;
      
      //public TShipping[] GetElements()
      public List<TShipping> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TShipping>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TShipping element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TShipping.SReadFromByteArray(byteArray));
          }
      }
      
      public static TShippingList SReadFromByteArray(ByteArray byteArray)
      {
            TShippingList result = new TShippingList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TShippingList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    End Reference Codes*/
    #region Service And Interfaces
    
    #endregion    //SECTION_TRANSACTIONS
    }
    // END OF GENERATED CODE
  