//source signature: [55-14-02-60-7E-6A-F3-75-B7-14-7D-68-6F-AD-19-76]
    // Autogenerated at 2017/2/4 20:47:27.
    // Created by [CodeGenerator Library:1.7.3.2014.04.20.15.19] FOR Server Protocol.
    // Don't manully change this code unless you have to, all changes will be lost next time code is generated.
    // Copyright ideadynamo.com 2008-2012.
    namespace com.tieao.mmo.interval
    {
    using System;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using com.ideadynamo.foundation;
    using com.ideadynamo.foundation.buffer;
    
      using com.tieao.mmo.CustomTypeInProtocol;
    
    // set com.tieao.mmo.interval
    #region enumerations
    
    public enum eServerType
    {
        GATEWAY =  1222425560,
        GAME =  -319593356,
        CENTER =  831300075,
        PUBLIC =  2074996249,
        GAMEDATA =  -2014202908,
        DATABASE =  1764948841,
        RANK =  130745892,
        LOG =  77678240,
        WORLDBOSS =  -1459330229,
        CHAT =  1562573444,
        COMMANDSENDER =  -1562971342,
        CROSSREALM =  1612221717,
        CROSSREALM_BATTLE =  -2035754756,
        PROTAL =  -1578832282,
        GM =  1234793066,
        PLATFORM_DOCKING =  20741763,
        MONITEORNODE =  -2036750227,
        MONITEORSERVER =  1339148770,
        XDGATEWAY =  822906388,
        ENTRY =  1709745226,
        GIFTCODE =  2075889117,
        CLIENTLOGGER =  -1337788871,
        UNKNOW =  493023182,
              
        _WRONG_INPUT = -1,
    }
    
    public static class eServerTypeHelper
    {
        public static eServerType ReadFromByteArray(ByteArray byteArray)
        {
            int val = byteArray.readInt();
            return Convert(val);
        }
        
        public static eServerType Convert(int value)
        {
            
            if( value == 1222425560)
            {
                return eServerType.GATEWAY ;
            }           
            
            if( value == -319593356)
            {
                return eServerType.GAME ;
            }           
            
            if( value == 831300075)
            {
                return eServerType.CENTER ;
            }           
            
            if( value == 2074996249)
            {
                return eServerType.PUBLIC ;
            }           
            
            if( value == -2014202908)
            {
                return eServerType.GAMEDATA ;
            }           
            
            if( value == 1764948841)
            {
                return eServerType.DATABASE ;
            }           
            
            if( value == 130745892)
            {
                return eServerType.RANK ;
            }           
            
            if( value == 77678240)
            {
                return eServerType.LOG ;
            }           
            
            if( value == -1459330229)
            {
                return eServerType.WORLDBOSS ;
            }           
            
            if( value == 1562573444)
            {
                return eServerType.CHAT ;
            }           
            
            if( value == -1562971342)
            {
                return eServerType.COMMANDSENDER ;
            }           
            
            if( value == 1612221717)
            {
                return eServerType.CROSSREALM ;
            }           
            
            if( value == -2035754756)
            {
                return eServerType.CROSSREALM_BATTLE ;
            }           
            
            if( value == -1578832282)
            {
                return eServerType.PROTAL ;
            }           
            
            if( value == 1234793066)
            {
                return eServerType.GM ;
            }           
            
            if( value == 20741763)
            {
                return eServerType.PLATFORM_DOCKING ;
            }           
            
            if( value == -2036750227)
            {
                return eServerType.MONITEORNODE ;
            }           
            
            if( value == 1339148770)
            {
                return eServerType.MONITEORSERVER ;
            }           
            
            if( value == 822906388)
            {
                return eServerType.XDGATEWAY ;
            }           
            
            if( value == 1709745226)
            {
                return eServerType.ENTRY ;
            }           
            
            if( value == 2075889117)
            {
                return eServerType.GIFTCODE ;
            }           
            
            if( value == -1337788871)
            {
                return eServerType.CLIENTLOGGER ;
            }           
            
            if( value == 493023182)
            {
                return eServerType.UNKNOW ;
            }           
            
      
            return eServerType._WRONG_INPUT;
        }
        
        public static void WriteToByteArray(ByteArray byteArray, eServerType  value)
        {
            byteArray.writeInt((int)value);
        }
    }
    
    #endregion    //SECTION_ENUM

    #region structures  // use class because struct's un-referenced behavior is not prefered
    
    [Serializable]
    public class PtServerInfo
    {
      public string m_Name;
      public eServerType m_Type;
      public string m_Address;
      public int m_Port;
      public int m_OutShortConnectionPort;
      public int m_OutLongConnectionPort;
      public int m_SessionID;
      public int m_ProcessID;
      public int m_ServerID;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( m_Name);
        eServerTypeHelper.WriteToByteArray(byteArray ,  m_Type);
        byteArray.writeUTF( m_Address);
        byteArray.writeDynamicsInt( m_Port);
        byteArray.writeDynamicsInt( m_OutShortConnectionPort);
        byteArray.writeDynamicsInt( m_OutLongConnectionPort);
        byteArray.writeDynamicsInt( m_SessionID);
        byteArray.writeDynamicsInt( m_ProcessID);
        byteArray.writeDynamicsInt( m_ServerID);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        m_Name = byteArray.readUTF();
        m_Type = eServerTypeHelper.ReadFromByteArray(byteArray);
        m_Address = byteArray.readUTF();
        m_Port = byteArray.readDynamicsInt();
        m_OutShortConnectionPort = byteArray.readDynamicsInt();
        m_OutLongConnectionPort = byteArray.readDynamicsInt();
        m_SessionID = byteArray.readDynamicsInt();
        m_ProcessID = byteArray.readDynamicsInt();
        m_ServerID = byteArray.readDynamicsInt();
        
      }
      
      public static PtServerInfo SReadFromByteArray(ByteArray byteArray)
      {
          PtServerInfo elem = new PtServerInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("PtServerInfo:{");
          
          sb.AppendFormat(@" m_Name  = ""{0}"",",m_Name );
          
          sb.AppendFormat(@" m_Type  = ""{0}"",",m_Type );
          
          sb.AppendFormat(@" m_Address  = ""{0}"",",m_Address );
          
          sb.AppendFormat(@" m_Port  = ""{0}"",",m_Port );
          
          sb.AppendFormat(@" m_OutShortConnectionPort  = ""{0}"",",m_OutShortConnectionPort );
          
          sb.AppendFormat(@" m_OutLongConnectionPort  = ""{0}"",",m_OutLongConnectionPort );
          
          sb.AppendFormat(@" m_SessionID  = ""{0}"",",m_SessionID );
          
          sb.AppendFormat(@" m_ProcessID  = ""{0}"",",m_ProcessID );
          
          sb.AppendFormat(@" m_ServerID  = ""{0}"",",m_ServerID );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class PtPlayerAllocSvrInfo
    {
      public eServerType svrType;
      public string svrName;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        eServerTypeHelper.WriteToByteArray(byteArray ,  svrType);
        byteArray.writeUTF( svrName);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        svrType = eServerTypeHelper.ReadFromByteArray(byteArray);
        svrName = byteArray.readUTF();
        
      }
      
      public static PtPlayerAllocSvrInfo SReadFromByteArray(ByteArray byteArray)
      {
          PtPlayerAllocSvrInfo elem = new PtPlayerAllocSvrInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("PtPlayerAllocSvrInfo:{");
          
          sb.AppendFormat(@" svrType  = ""{0}"",",svrType );
          
          sb.AppendFormat(@" svrName  = ""{0}"",",svrName );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TDBCfg
    {
      public int ID;
      public int dbType;
      public string machineName;
      public string lanIPAddr;
      public string dbName;
      public string loginName;
      public string passworld;
      public int port;
      public int childConnCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( ID);
        byteArray.writeDynamicsInt( dbType);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeUTF( dbName);
        byteArray.writeUTF( loginName);
        byteArray.writeUTF( passworld);
        byteArray.writeDynamicsInt( port);
        byteArray.writeDynamicsInt( childConnCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        ID = byteArray.readDynamicsInt();
        dbType = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        dbName = byteArray.readUTF();
        loginName = byteArray.readUTF();
        passworld = byteArray.readUTF();
        port = byteArray.readDynamicsInt();
        childConnCount = byteArray.readDynamicsInt();
        
      }
      
      public static TDBCfg SReadFromByteArray(ByteArray byteArray)
      {
          TDBCfg elem = new TDBCfg ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TDBCfg:{");
          
          sb.AppendFormat(@" ID  = ""{0}"",",ID );
          
          sb.AppendFormat(@" dbType  = ""{0}"",",dbType );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" dbName  = ""{0}"",",dbName );
          
          sb.AppendFormat(@" loginName  = ""{0}"",",loginName );
          
          sb.AppendFormat(@" passworld  = ""{0}"",",passworld );
          
          sb.AppendFormat(@" port  = ""{0}"",",port );
          
          sb.AppendFormat(@" childConnCount  = ""{0}"",",childConnCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TServerMoniteorBaseData
    {
      public int gameID;
      public int zoomID;
      public string name;
      public int index;
      public int state;
      public int recordTime;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( zoomID);
        byteArray.writeUTF( name);
        byteArray.writeDynamicsInt( index);
        byteArray.writeDynamicsInt( state);
        byteArray.writeDynamicsInt( recordTime);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        zoomID = byteArray.readDynamicsInt();
        name = byteArray.readUTF();
        index = byteArray.readDynamicsInt();
        state = byteArray.readDynamicsInt();
        recordTime = byteArray.readDynamicsInt();
        
      }
      
      public static TServerMoniteorBaseData SReadFromByteArray(ByteArray byteArray)
      {
          TServerMoniteorBaseData elem = new TServerMoniteorBaseData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TServerMoniteorBaseData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" zoomID  = ""{0}"",",zoomID );
          
          sb.AppendFormat(@" name  = ""{0}"",",name );
          
          sb.AppendFormat(@" index  = ""{0}"",",index );
          
          sb.AppendFormat(@" state  = ""{0}"",",state );
          
          sb.AppendFormat(@" recordTime  = ""{0}"",",recordTime );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TPortalServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int connectCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( connectCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        connectCount = byteArray.readDynamicsInt();
        
      }
      
      public static TPortalServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TPortalServerMoniteorData elem = new TPortalServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPortalServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" connectCount  = ""{0}"",",connectCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TPortalServerCfgData
    {
      public int gameID;
      public int index;
      public string allowLowVersion;
      public string machineName;
      public string wanIPAddr;
      public int outPort;
      public int inPort;
      public TIDStrKeyValue platformDockingServer;
      public string pushNotice;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( index);
        byteArray.writeUTF( allowLowVersion);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( wanIPAddr);
        byteArray.writeDynamicsInt( outPort);
        byteArray.writeDynamicsInt( inPort);
         platformDockingServer.WriteToByteArray(byteArray);
        byteArray.writeUTF( pushNotice);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        index = byteArray.readDynamicsInt();
        allowLowVersion = byteArray.readUTF();
        machineName = byteArray.readUTF();
        wanIPAddr = byteArray.readUTF();
        outPort = byteArray.readDynamicsInt();
        inPort = byteArray.readDynamicsInt();
        platformDockingServer = new TIDStrKeyValue();
			platformDockingServer.ReadFromByteArray(byteArray);
        pushNotice = byteArray.readUTF();
        
      }
      
      public static TPortalServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TPortalServerCfgData elem = new TPortalServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPortalServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" index  = ""{0}"",",index );
          
          sb.AppendFormat(@" allowLowVersion  = ""{0}"",",allowLowVersion );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" wanIPAddr  = ""{0}"",",wanIPAddr );
          
          sb.AppendFormat(@" outPort  = ""{0}"",",outPort );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" platformDockingServer  = ""{0}"",",platformDockingServer );
          
          sb.AppendFormat(@" pushNotice  = ""{0}"",",pushNotice );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TPortalServerToolData
    {
      public TPortalServerMoniteorData moniteorData;
      public TPortalServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TPortalServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TPortalServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TPortalServerToolData SReadFromByteArray(ByteArray byteArray)
      {
          TPortalServerToolData elem = new TPortalServerToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPortalServerToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public struct TPlatformCfgData
    {
      public int platformType;
      public string name;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( platformType);
        byteArray.writeUTF( name);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        platformType = byteArray.readDynamicsInt();
        name = byteArray.readUTF();
        
      }
      
      public static TPlatformCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TPlatformCfgData elem = new TPlatformCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPlatformCfgData:{");
          
          sb.AppendFormat(@" platformType  = ""{0}"",",platformType );
          
          sb.AppendFormat(@" name  = ""{0}"",",name );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TPlatformDockingServerCfgData
    {
      public int gameID;
      public int idnex;
      public TIntList platformIDList;
      public string wanIPAddr;
      public int outPort;
      public int inPort;
      public TPlatformCfgDataList platformList;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( idnex);
         platformIDList.WriteToByteArray(byteArray);
        byteArray.writeUTF( wanIPAddr);
        byteArray.writeDynamicsInt( outPort);
        byteArray.writeDynamicsInt( inPort);
         platformList.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        idnex = byteArray.readDynamicsInt();
        platformIDList = new TIntList();
			platformIDList.ReadFromByteArray(byteArray);
        wanIPAddr = byteArray.readUTF();
        outPort = byteArray.readDynamicsInt();
        inPort = byteArray.readDynamicsInt();
        platformList = new TPlatformCfgDataList();
			platformList.ReadFromByteArray(byteArray);
        
      }
      
      public static TPlatformDockingServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TPlatformDockingServerCfgData elem = new TPlatformDockingServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPlatformDockingServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" idnex  = ""{0}"",",idnex );
          
          sb.AppendFormat(@" platformIDList  = ""{0}"",",platformIDList );
          
          sb.AppendFormat(@" wanIPAddr  = ""{0}"",",wanIPAddr );
          
          sb.AppendFormat(@" outPort  = ""{0}"",",outPort );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" platformList  = ""{0}"",",platformList );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TCenterServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int totalAccountCount;
      public int loginCheckTimes;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( totalAccountCount);
        byteArray.writeDynamicsInt( loginCheckTimes);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        totalAccountCount = byteArray.readDynamicsInt();
        loginCheckTimes = byteArray.readDynamicsInt();
        
      }
      
      public static TCenterServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TCenterServerMoniteorData elem = new TCenterServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TCenterServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" totalAccountCount  = ""{0}"",",totalAccountCount );
          
          sb.AppendFormat(@" loginCheckTimes  = ""{0}"",",loginCheckTimes );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TCenterServerCfgData
    {
      public int gameID;
      public int serverID;
      public string serverGroupName;
      public string machineName;
      public string lanIPAddr;
      public int inPort;
      public TIDStrKeyValue crossRealmServer;
      public TIDStrKeyValueList protalServerList;
      public TIDStrKeyValue gmServer;
      public TIDStrKeyValue platformDockingServer;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( serverGroupName);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         crossRealmServer.WriteToByteArray(byteArray);
         protalServerList.WriteToByteArray(byteArray);
         gmServer.WriteToByteArray(byteArray);
         platformDockingServer.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        serverGroupName = byteArray.readUTF();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        crossRealmServer = new TIDStrKeyValue();
			crossRealmServer.ReadFromByteArray(byteArray);
        protalServerList = new TIDStrKeyValueList();
			protalServerList.ReadFromByteArray(byteArray);
        gmServer = new TIDStrKeyValue();
			gmServer.ReadFromByteArray(byteArray);
        platformDockingServer = new TIDStrKeyValue();
			platformDockingServer.ReadFromByteArray(byteArray);
        
      }
      
      public static TCenterServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TCenterServerCfgData elem = new TCenterServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TCenterServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" serverGroupName  = ""{0}"",",serverGroupName );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" crossRealmServer  = ""{0}"",",crossRealmServer );
          
          sb.AppendFormat(@" protalServerList  = ""{0}"",",protalServerList );
          
          sb.AppendFormat(@" gmServer  = ""{0}"",",gmServer );
          
          sb.AppendFormat(@" platformDockingServer  = ""{0}"",",platformDockingServer );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TCenterServerToolData
    {
      public TCenterServerMoniteorData moniteorData;
      public TCenterServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TCenterServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TCenterServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TCenterServerToolData SReadFromByteArray(ByteArray byteArray)
      {
          TCenterServerToolData elem = new TCenterServerToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TCenterServerToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TDataBaseServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int dbAccessCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( dbAccessCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        dbAccessCount = byteArray.readDynamicsInt();
        
      }
      
      public static TDataBaseServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TDataBaseServerMoniteorData elem = new TDataBaseServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TDataBaseServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" dbAccessCount  = ""{0}"",",dbAccessCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TDataBaseServerCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public string lanIPAddr;
      public int inPort;
      public TStrKeyValue centerServer;
      public TDBCfgList dbCfgList;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
         dbCfgList.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        dbCfgList = new TDBCfgList();
			dbCfgList.ReadFromByteArray(byteArray);
        
      }
      
      public static TDataBaseServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TDataBaseServerCfgData elem = new TDataBaseServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TDataBaseServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.AppendFormat(@" dbCfgList  = ""{0}"",",dbCfgList );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TDataBaseServerToolData
    {
      public TDataBaseServerMoniteorData moniteorData;
      public TDataBaseServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TDataBaseServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TDataBaseServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TDataBaseServerToolData SReadFromByteArray(ByteArray byteArray)
      {
          TDataBaseServerToolData elem = new TDataBaseServerToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TDataBaseServerToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGameDataServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int objectCountInDelayUpdatePool;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( objectCountInDelayUpdatePool);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        objectCountInDelayUpdatePool = byteArray.readDynamicsInt();
        
      }
      
      public static TGameDataServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TGameDataServerMoniteorData elem = new TGameDataServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGameDataServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" objectCountInDelayUpdatePool  = ""{0}"",",objectCountInDelayUpdatePool );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGameDataServerCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public string lanIPAddr;
      public int inPort;
      public TStrKeyValue centerServer;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        
      }
      
      public static TGameDataServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TGameDataServerCfgData elem = new TGameDataServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGameDataServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGameDataServerToolData
    {
      public TGameDataServerMoniteorData moniteorData;
      public TGameDataServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TGameDataServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TGameDataServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TGameDataServerToolData SReadFromByteArray(ByteArray byteArray)
      {
          TGameDataServerToolData elem = new TGameDataServerToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGameDataServerToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGameServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int playerCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( playerCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        playerCount = byteArray.readDynamicsInt();
        
      }
      
      public static TGameServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TGameServerMoniteorData elem = new TGameServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGameServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" playerCount  = ""{0}"",",playerCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGameServerCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public int index;
      public string lanIPAddr;
      public int inPort;
      public TStrKeyValue centerServer;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeDynamicsInt( index);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        index = byteArray.readDynamicsInt();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        
      }
      
      public static TGameServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TGameServerCfgData elem = new TGameServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGameServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" index  = ""{0}"",",index );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGameServerToolData
    {
      public TGameServerMoniteorData moniteorData;
      public TGameServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TGameServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TGameServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TGameServerToolData SReadFromByteArray(ByteArray byteArray)
      {
          TGameServerToolData elem = new TGameServerToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGameServerToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TPublicLogicServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int guildCount;
      public int totalChatCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( guildCount);
        byteArray.writeDynamicsInt( totalChatCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        guildCount = byteArray.readDynamicsInt();
        totalChatCount = byteArray.readDynamicsInt();
        
      }
      
      public static TPublicLogicServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TPublicLogicServerMoniteorData elem = new TPublicLogicServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPublicLogicServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" guildCount  = ""{0}"",",guildCount );
          
          sb.AppendFormat(@" totalChatCount  = ""{0}"",",totalChatCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TPublicLogicServerCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public string lanIPAddr;
      public int inPort;
      public TStrKeyValue centerServer;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        
      }
      
      public static TPublicLogicServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TPublicLogicServerCfgData elem = new TPublicLogicServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPublicLogicServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TPublicLogicToolData
    {
      public TPublicLogicServerMoniteorData moniteorData;
      public TPublicLogicServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TPublicLogicServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TPublicLogicServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TPublicLogicToolData SReadFromByteArray(ByteArray byteArray)
      {
          TPublicLogicToolData elem = new TPublicLogicToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TPublicLogicToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TRankServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        
      }
      
      public static TRankServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TRankServerMoniteorData elem = new TRankServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TRankServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TRankServerCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public string lanIPAddr;
      public int inPort;
      public TStrKeyValue centerServer;
      public TDBCfgList dbCfgList;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
         dbCfgList.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        dbCfgList = new TDBCfgList();
			dbCfgList.ReadFromByteArray(byteArray);
        
      }
      
      public static TRankServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TRankServerCfgData elem = new TRankServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TRankServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.AppendFormat(@" dbCfgList  = ""{0}"",",dbCfgList );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TRankServerToolData
    {
      public TRankServerMoniteorData moniteorData;
      public TRankServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TRankServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TRankServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TRankServerToolData SReadFromByteArray(ByteArray byteArray)
      {
          TRankServerToolData elem = new TRankServerToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TRankServerToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TChatServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        
      }
      
      public static TChatServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TChatServerMoniteorData elem = new TChatServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TChatServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TChatServerCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public string lanIPAddr;
      public int inPort;
      public TStrKeyValue centerServer;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        
      }
      
      public static TChatServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TChatServerCfgData elem = new TChatServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TChatServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TChatServerToolData
    {
      public TChatServerMoniteorData moniteorData;
      public TChatServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TChatServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TChatServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TChatServerToolData SReadFromByteArray(ByteArray byteArray)
      {
          TChatServerToolData elem = new TChatServerToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TChatServerToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TWorldBossServerMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        
      }
      
      public static TWorldBossServerMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TWorldBossServerMoniteorData elem = new TWorldBossServerMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TWorldBossServerMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TWorldBossServerCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public string lanIPAddr;
      public int inPort;
      public TStrKeyValue centerServer;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( lanIPAddr);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        lanIPAddr = byteArray.readUTF();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        
      }
      
      public static TWorldBossServerCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TWorldBossServerCfgData elem = new TWorldBossServerCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TWorldBossServerCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" lanIPAddr  = ""{0}"",",lanIPAddr );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TWorldBossServerTool
    {
      public TWorldBossServerMoniteorData moniteorData;
      public TWorldBossServerCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TWorldBossServerMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TWorldBossServerCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TWorldBossServerTool SReadFromByteArray(ByteArray byteArray)
      {
          TWorldBossServerTool elem = new TWorldBossServerTool ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TWorldBossServerTool:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGateWayMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int shortClientConectionCount;
      public int longClientConectionCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( shortClientConectionCount);
        byteArray.writeDynamicsInt( longClientConectionCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        shortClientConectionCount = byteArray.readDynamicsInt();
        longClientConectionCount = byteArray.readDynamicsInt();
        
      }
      
      public static TGateWayMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TGateWayMoniteorData elem = new TGateWayMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGateWayMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" shortClientConectionCount  = ""{0}"",",shortClientConectionCount );
          
          sb.AppendFormat(@" longClientConectionCount  = ""{0}"",",longClientConectionCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGateWayCfgData
    {
      public int gameID;
      public int serverID;
      public string machineName;
      public int index;
      public string wanIPAddr;
      public int outShortConnectionPort;
      public int outLongConnectionPort;
      public int inPort;
      public TStrKeyValue centerServer;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( machineName);
        byteArray.writeDynamicsInt( index);
        byteArray.writeUTF( wanIPAddr);
        byteArray.writeDynamicsInt( outShortConnectionPort);
        byteArray.writeDynamicsInt( outLongConnectionPort);
        byteArray.writeDynamicsInt( inPort);
         centerServer.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        index = byteArray.readDynamicsInt();
        wanIPAddr = byteArray.readUTF();
        outShortConnectionPort = byteArray.readDynamicsInt();
        outLongConnectionPort = byteArray.readDynamicsInt();
        inPort = byteArray.readDynamicsInt();
        centerServer = new TStrKeyValue();
			centerServer.ReadFromByteArray(byteArray);
        
      }
      
      public static TGateWayCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TGateWayCfgData elem = new TGateWayCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGateWayCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" index  = ""{0}"",",index );
          
          sb.AppendFormat(@" wanIPAddr  = ""{0}"",",wanIPAddr );
          
          sb.AppendFormat(@" outShortConnectionPort  = ""{0}"",",outShortConnectionPort );
          
          sb.AppendFormat(@" outLongConnectionPort  = ""{0}"",",outLongConnectionPort );
          
          sb.AppendFormat(@" inPort  = ""{0}"",",inPort );
          
          sb.AppendFormat(@" centerServer  = ""{0}"",",centerServer );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TGateWayToolData
    {
      public TGateWayMoniteorData moniteorData;
      public TGateWayCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TGateWayMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TGateWayCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TGateWayToolData SReadFromByteArray(ByteArray byteArray)
      {
          TGateWayToolData elem = new TGateWayToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TGateWayToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TXDGatewayMoniteorData
    {
      public TServerMoniteorBaseData baseData;
      public int dealProtocolCount;
      public int uncheckConnectionCount;
      public int checkingConnectionCount;
      public int shortClientConectionCount;
      public int longClientConectionCount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         baseData.WriteToByteArray(byteArray);
        byteArray.writeDynamicsInt( dealProtocolCount);
        byteArray.writeDynamicsInt( uncheckConnectionCount);
        byteArray.writeDynamicsInt( checkingConnectionCount);
        byteArray.writeDynamicsInt( shortClientConectionCount);
        byteArray.writeDynamicsInt( longClientConectionCount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        baseData = new TServerMoniteorBaseData();
			baseData.ReadFromByteArray(byteArray);
        dealProtocolCount = byteArray.readDynamicsInt();
        uncheckConnectionCount = byteArray.readDynamicsInt();
        checkingConnectionCount = byteArray.readDynamicsInt();
        shortClientConectionCount = byteArray.readDynamicsInt();
        longClientConectionCount = byteArray.readDynamicsInt();
        
      }
      
      public static TXDGatewayMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TXDGatewayMoniteorData elem = new TXDGatewayMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TXDGatewayMoniteorData:{");
          
          sb.AppendFormat(@" baseData  = ""{0}"",",baseData );
          
          sb.AppendFormat(@" dealProtocolCount  = ""{0}"",",dealProtocolCount );
          
          sb.AppendFormat(@" uncheckConnectionCount  = ""{0}"",",uncheckConnectionCount );
          
          sb.AppendFormat(@" checkingConnectionCount  = ""{0}"",",checkingConnectionCount );
          
          sb.AppendFormat(@" shortClientConectionCount  = ""{0}"",",shortClientConectionCount );
          
          sb.AppendFormat(@" longClientConectionCount  = ""{0}"",",longClientConectionCount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TXDGatewayCfgData
    {
      public int gameID;
      public string machineName;
      public int index;
      public string insideIPAddr;
      public int insidePort;
      public int outsidePort;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeUTF( machineName);
        byteArray.writeDynamicsInt( index);
        byteArray.writeUTF( insideIPAddr);
        byteArray.writeDynamicsInt( insidePort);
        byteArray.writeDynamicsInt( outsidePort);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        machineName = byteArray.readUTF();
        index = byteArray.readDynamicsInt();
        insideIPAddr = byteArray.readUTF();
        insidePort = byteArray.readDynamicsInt();
        outsidePort = byteArray.readDynamicsInt();
        
      }
      
      public static TXDGatewayCfgData SReadFromByteArray(ByteArray byteArray)
      {
          TXDGatewayCfgData elem = new TXDGatewayCfgData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TXDGatewayCfgData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" index  = ""{0}"",",index );
          
          sb.AppendFormat(@" insideIPAddr  = ""{0}"",",insideIPAddr );
          
          sb.AppendFormat(@" insidePort  = ""{0}"",",insidePort );
          
          sb.AppendFormat(@" outsidePort  = ""{0}"",",outsidePort );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TXDGateWayToolData
    {
      public TXDGatewayMoniteorData moniteorData;
      public TXDGatewayCfgData configData;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         moniteorData.WriteToByteArray(byteArray);
         configData.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        moniteorData = new TXDGatewayMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        configData = new TXDGatewayCfgData();
			configData.ReadFromByteArray(byteArray);
        
      }
      
      public static TXDGateWayToolData SReadFromByteArray(ByteArray byteArray)
      {
          TXDGateWayToolData elem = new TXDGateWayToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TXDGateWayToolData:{");
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TServerGroupBaseCfg
    {
      public int gameID;
      public int serverID;
      public string serverName;
      public TStrList machineList;
      public string version;
      public TIntList dbIDList;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeUTF( serverName);
         machineList.WriteToByteArray(byteArray);
        byteArray.writeUTF( version);
         dbIDList.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        serverName = byteArray.readUTF();
        machineList = new TStrList();
			machineList.ReadFromByteArray(byteArray);
        version = byteArray.readUTF();
        dbIDList = new TIntList();
			dbIDList.ReadFromByteArray(byteArray);
        
      }
      
      public static TServerGroupBaseCfg SReadFromByteArray(ByteArray byteArray)
      {
          TServerGroupBaseCfg elem = new TServerGroupBaseCfg ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TServerGroupBaseCfg:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" serverName  = ""{0}"",",serverName );
          
          sb.AppendFormat(@" machineList  = ""{0}"",",machineList );
          
          sb.AppendFormat(@" version  = ""{0}"",",version );
          
          sb.AppendFormat(@" dbIDList  = ""{0}"",",dbIDList );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TServerGroupMoniteorData
    {
      public int gameID;
      public int serverID;
      public int serverState;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( gameID);
        byteArray.writeDynamicsInt( serverID);
        byteArray.writeDynamicsInt( serverState);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        gameID = byteArray.readDynamicsInt();
        serverID = byteArray.readDynamicsInt();
        serverState = byteArray.readDynamicsInt();
        
      }
      
      public static TServerGroupMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TServerGroupMoniteorData elem = new TServerGroupMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TServerGroupMoniteorData:{");
          
          sb.AppendFormat(@" gameID  = ""{0}"",",gameID );
          
          sb.AppendFormat(@" serverID  = ""{0}"",",serverID );
          
          sb.AppendFormat(@" serverState  = ""{0}"",",serverState );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TServerGroupToolData
    {
      public TServerGroupBaseCfg configData;
      public TServerGroupMoniteorData moniteorData;
      public TCenterServerToolData centerToolData;
      public TDataBaseServerToolData dataBaseToolData;
      public TGameDataServerToolData gameDataToolData;
      public TGameServerToolDataList gameToolDataList;
      public TPublicLogicToolData publicLogicToolData;
      public TRankServerToolData rankToolData;
      public TChatServerToolData chatToolData;
      public TWorldBossServerTool worldBossToolData;
      public TGateWayToolDataList gateWayToolDataList;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         configData.WriteToByteArray(byteArray);
         moniteorData.WriteToByteArray(byteArray);
         centerToolData.WriteToByteArray(byteArray);
         dataBaseToolData.WriteToByteArray(byteArray);
         gameDataToolData.WriteToByteArray(byteArray);
         gameToolDataList.WriteToByteArray(byteArray);
         publicLogicToolData.WriteToByteArray(byteArray);
         rankToolData.WriteToByteArray(byteArray);
         chatToolData.WriteToByteArray(byteArray);
         worldBossToolData.WriteToByteArray(byteArray);
         gateWayToolDataList.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        configData = new TServerGroupBaseCfg();
			configData.ReadFromByteArray(byteArray);
        moniteorData = new TServerGroupMoniteorData();
			moniteorData.ReadFromByteArray(byteArray);
        centerToolData = new TCenterServerToolData();
			centerToolData.ReadFromByteArray(byteArray);
        dataBaseToolData = new TDataBaseServerToolData();
			dataBaseToolData.ReadFromByteArray(byteArray);
        gameDataToolData = new TGameDataServerToolData();
			gameDataToolData.ReadFromByteArray(byteArray);
        gameToolDataList = new TGameServerToolDataList();
			gameToolDataList.ReadFromByteArray(byteArray);
        publicLogicToolData = new TPublicLogicToolData();
			publicLogicToolData.ReadFromByteArray(byteArray);
        rankToolData = new TRankServerToolData();
			rankToolData.ReadFromByteArray(byteArray);
        chatToolData = new TChatServerToolData();
			chatToolData.ReadFromByteArray(byteArray);
        worldBossToolData = new TWorldBossServerTool();
			worldBossToolData.ReadFromByteArray(byteArray);
        gateWayToolDataList = new TGateWayToolDataList();
			gateWayToolDataList.ReadFromByteArray(byteArray);
        
      }
      
      public static TServerGroupToolData SReadFromByteArray(ByteArray byteArray)
      {
          TServerGroupToolData elem = new TServerGroupToolData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TServerGroupToolData:{");
          
          sb.AppendFormat(@" configData  = ""{0}"",",configData );
          
          sb.AppendFormat(@" moniteorData  = ""{0}"",",moniteorData );
          
          sb.AppendFormat(@" centerToolData  = ""{0}"",",centerToolData );
          
          sb.AppendFormat(@" dataBaseToolData  = ""{0}"",",dataBaseToolData );
          
          sb.AppendFormat(@" gameDataToolData  = ""{0}"",",gameDataToolData );
          
          sb.AppendFormat(@" gameToolDataList  = ""{0}"",",gameToolDataList );
          
          sb.AppendFormat(@" publicLogicToolData  = ""{0}"",",publicLogicToolData );
          
          sb.AppendFormat(@" rankToolData  = ""{0}"",",rankToolData );
          
          sb.AppendFormat(@" chatToolData  = ""{0}"",",chatToolData );
          
          sb.AppendFormat(@" worldBossToolData  = ""{0}"",",worldBossToolData );
          
          sb.AppendFormat(@" gateWayToolDataList  = ""{0}"",",gateWayToolDataList );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TServerGroupCfg
    {
      public TServerGroupBaseCfg groupBase;
      public TCenterServerCfgData centerCfg;
      public TDataBaseServerCfgData databaseCfg;
      public TGameDataServerCfgData gameDataCfg;
      public TGameServerCfgDataList gameCfgList;
      public TPublicLogicServerCfgData publicLogicCfg;
      public TRankServerCfgData rankCfg;
      public TChatServerCfgData chatCfg;
      public TWorldBossServerCfgData worldBossCfg;
      public TGateWayCfgDataList gatewayCfgList;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
         groupBase.WriteToByteArray(byteArray);
         centerCfg.WriteToByteArray(byteArray);
         databaseCfg.WriteToByteArray(byteArray);
         gameDataCfg.WriteToByteArray(byteArray);
         gameCfgList.WriteToByteArray(byteArray);
         publicLogicCfg.WriteToByteArray(byteArray);
         rankCfg.WriteToByteArray(byteArray);
         chatCfg.WriteToByteArray(byteArray);
         worldBossCfg.WriteToByteArray(byteArray);
         gatewayCfgList.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        groupBase = new TServerGroupBaseCfg();
			groupBase.ReadFromByteArray(byteArray);
        centerCfg = new TCenterServerCfgData();
			centerCfg.ReadFromByteArray(byteArray);
        databaseCfg = new TDataBaseServerCfgData();
			databaseCfg.ReadFromByteArray(byteArray);
        gameDataCfg = new TGameDataServerCfgData();
			gameDataCfg.ReadFromByteArray(byteArray);
        gameCfgList = new TGameServerCfgDataList();
			gameCfgList.ReadFromByteArray(byteArray);
        publicLogicCfg = new TPublicLogicServerCfgData();
			publicLogicCfg.ReadFromByteArray(byteArray);
        rankCfg = new TRankServerCfgData();
			rankCfg.ReadFromByteArray(byteArray);
        chatCfg = new TChatServerCfgData();
			chatCfg.ReadFromByteArray(byteArray);
        worldBossCfg = new TWorldBossServerCfgData();
			worldBossCfg.ReadFromByteArray(byteArray);
        gatewayCfgList = new TGateWayCfgDataList();
			gatewayCfgList.ReadFromByteArray(byteArray);
        
      }
      
      public static TServerGroupCfg SReadFromByteArray(ByteArray byteArray)
      {
          TServerGroupCfg elem = new TServerGroupCfg ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TServerGroupCfg:{");
          
          sb.AppendFormat(@" groupBase  = ""{0}"",",groupBase );
          
          sb.AppendFormat(@" centerCfg  = ""{0}"",",centerCfg );
          
          sb.AppendFormat(@" databaseCfg  = ""{0}"",",databaseCfg );
          
          sb.AppendFormat(@" gameDataCfg  = ""{0}"",",gameDataCfg );
          
          sb.AppendFormat(@" gameCfgList  = ""{0}"",",gameCfgList );
          
          sb.AppendFormat(@" publicLogicCfg  = ""{0}"",",publicLogicCfg );
          
          sb.AppendFormat(@" rankCfg  = ""{0}"",",rankCfg );
          
          sb.AppendFormat(@" chatCfg  = ""{0}"",",chatCfg );
          
          sb.AppendFormat(@" worldBossCfg  = ""{0}"",",worldBossCfg );
          
          sb.AppendFormat(@" gatewayCfgList  = ""{0}"",",gatewayCfgList );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TMachineMoniteorData
    {
      public string machineName;
      public string ip;
      public int state;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( machineName);
        byteArray.writeUTF( ip);
        byteArray.writeDynamicsInt( state);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        machineName = byteArray.readUTF();
        ip = byteArray.readUTF();
        state = byteArray.readDynamicsInt();
        
      }
      
      public static TMachineMoniteorData SReadFromByteArray(ByteArray byteArray)
      {
          TMachineMoniteorData elem = new TMachineMoniteorData ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TMachineMoniteorData:{");
          
          sb.AppendFormat(@" machineName  = ""{0}"",",machineName );
          
          sb.AppendFormat(@" ip  = ""{0}"",",ip );
          
          sb.AppendFormat(@" state  = ""{0}"",",state );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TIntKeyStrValue
    {
      public int key;
      public string value;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( key);
        byteArray.writeUTF( value);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        key = byteArray.readDynamicsInt();
        value = byteArray.readUTF();
        
      }
      
      public static TIntKeyStrValue SReadFromByteArray(ByteArray byteArray)
      {
          TIntKeyStrValue elem = new TIntKeyStrValue ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TIntKeyStrValue:{");
          
          sb.AppendFormat(@" key  = ""{0}"",",key );
          
          sb.AppendFormat(@" value  = ""{0}"",",value );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class TConnectionCheck
    {
      public int clientSessionID;
      public int gameChannleID;
      public bool isLongConnection;
      public bool isPassedCheck;
      public long playerFlagID;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( clientSessionID);
        byteArray.writeDynamicsInt( gameChannleID);
        byteArray.writeBoolean( isLongConnection);
        byteArray.writeBoolean( isPassedCheck);
        byteArray.writeLong( playerFlagID);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        clientSessionID = byteArray.readDynamicsInt();
        gameChannleID = byteArray.readDynamicsInt();
        isLongConnection = byteArray.readBoolean();
        isPassedCheck = byteArray.readBoolean();
        playerFlagID = byteArray.readLong();
        
      }
      
      public static TConnectionCheck SReadFromByteArray(ByteArray byteArray)
      {
          TConnectionCheck elem = new TConnectionCheck ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("TConnectionCheck:{");
          
          sb.AppendFormat(@" clientSessionID  = ""{0}"",",clientSessionID );
          
          sb.AppendFormat(@" gameChannleID  = ""{0}"",",gameChannleID );
          
          sb.AppendFormat(@" isLongConnection  = ""{0}"",",isLongConnection );
          
          sb.AppendFormat(@" isPassedCheck  = ""{0}"",",isPassedCheck );
          
          sb.AppendFormat(@" playerFlagID  = ""{0}"",",playerFlagID );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    #endregion    //SECTION_STRUCTURE

    #region sequences
    
    [Serializable]
    public class PtServerList
    {
      private List<PtServerInfo> _elements = new List<PtServerInfo>();
      //private PtServerInfo[] _elements;
      
      //public PtServerInfo[] GetElements()
      public List<PtServerInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<PtServerInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(PtServerInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (PtServerInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static PtServerList SReadFromByteArray(ByteArray byteArray)
      {
            PtServerList result = new PtServerList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("PtServerList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class PtPlayerAllocSvrList
    {
      private List<PtPlayerAllocSvrInfo> _elements = new List<PtPlayerAllocSvrInfo>();
      //private PtPlayerAllocSvrInfo[] _elements;
      
      //public PtPlayerAllocSvrInfo[] GetElements()
      public List<PtPlayerAllocSvrInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<PtPlayerAllocSvrInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(PtPlayerAllocSvrInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (PtPlayerAllocSvrInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static PtPlayerAllocSvrList SReadFromByteArray(ByteArray byteArray)
      {
            PtPlayerAllocSvrList result = new PtPlayerAllocSvrList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("PtPlayerAllocSvrList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TDBCfgList
    {
      private List<TDBCfg> _elements = new List<TDBCfg>();
      //private TDBCfg[] _elements;
      
      //public TDBCfg[] GetElements()
      public List<TDBCfg> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TDBCfg>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TDBCfg element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TDBCfg.SReadFromByteArray(byteArray));
          }
      }
      
      public static TDBCfgList SReadFromByteArray(ByteArray byteArray)
      {
            TDBCfgList result = new TDBCfgList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TDBCfgList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TPortalServerCfgDataList
    {
      private List<TPortalServerCfgData> _elements = new List<TPortalServerCfgData>();
      //private TPortalServerCfgData[] _elements;
      
      //public TPortalServerCfgData[] GetElements()
      public List<TPortalServerCfgData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TPortalServerCfgData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TPortalServerCfgData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TPortalServerCfgData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TPortalServerCfgDataList SReadFromByteArray(ByteArray byteArray)
      {
            TPortalServerCfgDataList result = new TPortalServerCfgDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TPortalServerCfgDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TPortalServerToolDataList
    {
      private List<TPortalServerToolData> _elements = new List<TPortalServerToolData>();
      //private TPortalServerToolData[] _elements;
      
      //public TPortalServerToolData[] GetElements()
      public List<TPortalServerToolData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TPortalServerToolData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TPortalServerToolData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TPortalServerToolData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TPortalServerToolDataList SReadFromByteArray(ByteArray byteArray)
      {
            TPortalServerToolDataList result = new TPortalServerToolDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TPortalServerToolDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TPlatformCfgDataList
    {
      private List<TPlatformCfgData> _elements = new List<TPlatformCfgData>();
      //private TPlatformCfgData[] _elements;
      
      //public TPlatformCfgData[] GetElements()
      public List<TPlatformCfgData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TPlatformCfgData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TPlatformCfgData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TPlatformCfgData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TPlatformCfgDataList SReadFromByteArray(ByteArray byteArray)
      {
            TPlatformCfgDataList result = new TPlatformCfgDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TPlatformCfgDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TPlatformDockingServerCfgDataList
    {
      private List<TPlatformDockingServerCfgData> _elements = new List<TPlatformDockingServerCfgData>();
      //private TPlatformDockingServerCfgData[] _elements;
      
      //public TPlatformDockingServerCfgData[] GetElements()
      public List<TPlatformDockingServerCfgData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TPlatformDockingServerCfgData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TPlatformDockingServerCfgData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TPlatformDockingServerCfgData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TPlatformDockingServerCfgDataList SReadFromByteArray(ByteArray byteArray)
      {
            TPlatformDockingServerCfgDataList result = new TPlatformDockingServerCfgDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TPlatformDockingServerCfgDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TCenterServerMoniteorDataList
    {
      private List<TCenterServerMoniteorData> _elements = new List<TCenterServerMoniteorData>();
      //private TCenterServerMoniteorData[] _elements;
      
      //public TCenterServerMoniteorData[] GetElements()
      public List<TCenterServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TCenterServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TCenterServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TCenterServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TCenterServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TCenterServerMoniteorDataList result = new TCenterServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TCenterServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TDataBaseServerMoniteorDataList
    {
      private List<TDataBaseServerMoniteorData> _elements = new List<TDataBaseServerMoniteorData>();
      //private TDataBaseServerMoniteorData[] _elements;
      
      //public TDataBaseServerMoniteorData[] GetElements()
      public List<TDataBaseServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TDataBaseServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TDataBaseServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TDataBaseServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TDataBaseServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TDataBaseServerMoniteorDataList result = new TDataBaseServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TDataBaseServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TGameDataServerMoniteorDataList
    {
      private List<TGameDataServerMoniteorData> _elements = new List<TGameDataServerMoniteorData>();
      //private TGameDataServerMoniteorData[] _elements;
      
      //public TGameDataServerMoniteorData[] GetElements()
      public List<TGameDataServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TGameDataServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TGameDataServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TGameDataServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TGameDataServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TGameDataServerMoniteorDataList result = new TGameDataServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TGameDataServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TGameServerMoniteorDataList
    {
      private List<TGameServerMoniteorData> _elements = new List<TGameServerMoniteorData>();
      //private TGameServerMoniteorData[] _elements;
      
      //public TGameServerMoniteorData[] GetElements()
      public List<TGameServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TGameServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TGameServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TGameServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TGameServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TGameServerMoniteorDataList result = new TGameServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TGameServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TGameServerCfgDataList
    {
      private List<TGameServerCfgData> _elements = new List<TGameServerCfgData>();
      //private TGameServerCfgData[] _elements;
      
      //public TGameServerCfgData[] GetElements()
      public List<TGameServerCfgData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TGameServerCfgData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TGameServerCfgData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TGameServerCfgData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TGameServerCfgDataList SReadFromByteArray(ByteArray byteArray)
      {
            TGameServerCfgDataList result = new TGameServerCfgDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TGameServerCfgDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TGameServerToolDataList
    {
      private List<TGameServerToolData> _elements = new List<TGameServerToolData>();
      //private TGameServerToolData[] _elements;
      
      //public TGameServerToolData[] GetElements()
      public List<TGameServerToolData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TGameServerToolData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TGameServerToolData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TGameServerToolData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TGameServerToolDataList SReadFromByteArray(ByteArray byteArray)
      {
            TGameServerToolDataList result = new TGameServerToolDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TGameServerToolDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TPublicLogicServerMoniteorDataList
    {
      private List<TPublicLogicServerMoniteorData> _elements = new List<TPublicLogicServerMoniteorData>();
      //private TPublicLogicServerMoniteorData[] _elements;
      
      //public TPublicLogicServerMoniteorData[] GetElements()
      public List<TPublicLogicServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TPublicLogicServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TPublicLogicServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TPublicLogicServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TPublicLogicServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TPublicLogicServerMoniteorDataList result = new TPublicLogicServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TPublicLogicServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TRankServerMoniteorDataList
    {
      private List<TRankServerMoniteorData> _elements = new List<TRankServerMoniteorData>();
      //private TRankServerMoniteorData[] _elements;
      
      //public TRankServerMoniteorData[] GetElements()
      public List<TRankServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TRankServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TRankServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TRankServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TRankServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TRankServerMoniteorDataList result = new TRankServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TRankServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TChatServerMoniteorDataList
    {
      private List<TChatServerMoniteorData> _elements = new List<TChatServerMoniteorData>();
      //private TChatServerMoniteorData[] _elements;
      
      //public TChatServerMoniteorData[] GetElements()
      public List<TChatServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TChatServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TChatServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TChatServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TChatServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TChatServerMoniteorDataList result = new TChatServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TChatServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TWorldBossServerMoniteorDataList
    {
      private List<TWorldBossServerMoniteorData> _elements = new List<TWorldBossServerMoniteorData>();
      //private TWorldBossServerMoniteorData[] _elements;
      
      //public TWorldBossServerMoniteorData[] GetElements()
      public List<TWorldBossServerMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TWorldBossServerMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TWorldBossServerMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TWorldBossServerMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TWorldBossServerMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TWorldBossServerMoniteorDataList result = new TWorldBossServerMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TWorldBossServerMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TGateWayMoniteorDataList
    {
      private List<TGateWayMoniteorData> _elements = new List<TGateWayMoniteorData>();
      //private TGateWayMoniteorData[] _elements;
      
      //public TGateWayMoniteorData[] GetElements()
      public List<TGateWayMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TGateWayMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TGateWayMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TGateWayMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TGateWayMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TGateWayMoniteorDataList result = new TGateWayMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TGateWayMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TGateWayCfgDataList
    {
      private List<TGateWayCfgData> _elements = new List<TGateWayCfgData>();
      //private TGateWayCfgData[] _elements;
      
      //public TGateWayCfgData[] GetElements()
      public List<TGateWayCfgData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TGateWayCfgData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TGateWayCfgData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TGateWayCfgData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TGateWayCfgDataList SReadFromByteArray(ByteArray byteArray)
      {
            TGateWayCfgDataList result = new TGateWayCfgDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TGateWayCfgDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TGateWayToolDataList
    {
      private List<TGateWayToolData> _elements = new List<TGateWayToolData>();
      //private TGateWayToolData[] _elements;
      
      //public TGateWayToolData[] GetElements()
      public List<TGateWayToolData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TGateWayToolData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TGateWayToolData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TGateWayToolData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TGateWayToolDataList SReadFromByteArray(ByteArray byteArray)
      {
            TGateWayToolDataList result = new TGateWayToolDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TGateWayToolDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TXDGatewayMoniteorDataList
    {
      private List<TXDGatewayMoniteorData> _elements = new List<TXDGatewayMoniteorData>();
      //private TXDGatewayMoniteorData[] _elements;
      
      //public TXDGatewayMoniteorData[] GetElements()
      public List<TXDGatewayMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TXDGatewayMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TXDGatewayMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TXDGatewayMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TXDGatewayMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TXDGatewayMoniteorDataList result = new TXDGatewayMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TXDGatewayMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TXDGatewayCfgDataList
    {
      private List<TXDGatewayCfgData> _elements = new List<TXDGatewayCfgData>();
      //private TXDGatewayCfgData[] _elements;
      
      //public TXDGatewayCfgData[] GetElements()
      public List<TXDGatewayCfgData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TXDGatewayCfgData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TXDGatewayCfgData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TXDGatewayCfgData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TXDGatewayCfgDataList SReadFromByteArray(ByteArray byteArray)
      {
            TXDGatewayCfgDataList result = new TXDGatewayCfgDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TXDGatewayCfgDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TXDGateWayToolDataList
    {
      private List<TXDGateWayToolData> _elements = new List<TXDGateWayToolData>();
      //private TXDGateWayToolData[] _elements;
      
      //public TXDGateWayToolData[] GetElements()
      public List<TXDGateWayToolData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TXDGateWayToolData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TXDGateWayToolData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TXDGateWayToolData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TXDGateWayToolDataList SReadFromByteArray(ByteArray byteArray)
      {
            TXDGateWayToolDataList result = new TXDGateWayToolDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TXDGateWayToolDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TServerGroupToolDataList
    {
      private List<TServerGroupToolData> _elements = new List<TServerGroupToolData>();
      //private TServerGroupToolData[] _elements;
      
      //public TServerGroupToolData[] GetElements()
      public List<TServerGroupToolData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TServerGroupToolData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TServerGroupToolData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TServerGroupToolData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TServerGroupToolDataList SReadFromByteArray(ByteArray byteArray)
      {
            TServerGroupToolDataList result = new TServerGroupToolDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TServerGroupToolDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TMachineMoniteorDataList
    {
      private List<TMachineMoniteorData> _elements = new List<TMachineMoniteorData>();
      //private TMachineMoniteorData[] _elements;
      
      //public TMachineMoniteorData[] GetElements()
      public List<TMachineMoniteorData> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TMachineMoniteorData>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TMachineMoniteorData element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TMachineMoniteorData.SReadFromByteArray(byteArray));
          }
      }
      
      public static TMachineMoniteorDataList SReadFromByteArray(ByteArray byteArray)
      {
            TMachineMoniteorDataList result = new TMachineMoniteorDataList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TMachineMoniteorDataList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class TIntKeyStrValueList
    {
      private List<TIntKeyStrValue> _elements = new List<TIntKeyStrValue>();
      //private TIntKeyStrValue[] _elements;
      
      //public TIntKeyStrValue[] GetElements()
      public List<TIntKeyStrValue> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<TIntKeyStrValue>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(TIntKeyStrValue element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (TIntKeyStrValue.SReadFromByteArray(byteArray));
          }
      }
      
      public static TIntKeyStrValueList SReadFromByteArray(ByteArray byteArray)
      {
            TIntKeyStrValueList result = new TIntKeyStrValueList();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("TIntKeyStrValueList,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    #endregion    //SECTION_SEQUENCE

    #region directory
    
    #endregion    //SECTION_DIRECTORY
    }
    // END OF GENERATED CODE
  