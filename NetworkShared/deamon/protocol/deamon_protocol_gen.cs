//source signature: [73-E0-45-2E-31-5F-03-89-1E-CC-DF-04-1A-3A-C0-0C]
// Autogenerated at 2016/3/24 14:25:34
// Created by [CodeGenerator Library:1.7.3.2014.04.20.15.19] FOR Client Protocol.
// Don't manully change this code unless you have to, all changes will be lost next time code is generated.
// Copyright ideadynamo.com 2008-2012.
namespace com.tieao.mmo.deamon.client
{
    using System;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using com.ideadynamo.foundation;
    using com.ideadynamo.foundation.buffer;
    using com.tieao.mmo.deamon;
    
    // set com.tieao.mmo.deamon
    /*Reference Codes
    
    [Serializable]
    public class MachineInfo
    {
      public string id;
      public int memory;
      public float cpu;
      public int cores;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( id);
        byteArray.writeDynamicsInt( memory);
        byteArray.writeFloat( cpu);
        byteArray.writeDynamicsInt( cores);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readUTF();
        memory = byteArray.readDynamicsInt();
        cpu = byteArray.readFloat();
        cores = byteArray.readDynamicsInt();
        
      }
      
      public static MachineInfo SReadFromByteArray(ByteArray byteArray)
      {
          MachineInfo elem = new MachineInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("MachineInfo:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" memory  = ""{0}"",",memory );
          
          sb.AppendFormat(@" cpu  = ""{0}"",",cpu );
          
          sb.AppendFormat(@" cores  = ""{0}"",",cores );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class ApplicationInfo
    {
      public string id;
      public string application;
      public string description;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( id);
        byteArray.writeUTF( application);
        byteArray.writeUTF( description);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readUTF();
        application = byteArray.readUTF();
        description = byteArray.readUTF();
        
      }
      
      public static ApplicationInfo SReadFromByteArray(ByteArray byteArray)
      {
          ApplicationInfo elem = new ApplicationInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("ApplicationInfo:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" application  = ""{0}"",",application );
          
          sb.AppendFormat(@" description  = ""{0}"",",description );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class VersionInfo
    {
      public string id;
      public string application;
      public string folder;
      public string releaseDate;
      public int instances;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( id);
        byteArray.writeUTF( application);
        byteArray.writeUTF( folder);
        byteArray.writeUTF( releaseDate);
        byteArray.writeDynamicsInt( instances);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readUTF();
        application = byteArray.readUTF();
        folder = byteArray.readUTF();
        releaseDate = byteArray.readUTF();
        instances = byteArray.readDynamicsInt();
        
      }
      
      public static VersionInfo SReadFromByteArray(ByteArray byteArray)
      {
          VersionInfo elem = new VersionInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("VersionInfo:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" application  = ""{0}"",",application );
          
          sb.AppendFormat(@" folder  = ""{0}"",",folder );
          
          sb.AppendFormat(@" releaseDate  = ""{0}"",",releaseDate );
          
          sb.AppendFormat(@" instances  = ""{0}"",",instances );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class Customizer
    {
      public string file;
      public string fieldName;
      public string fileValueSH;
      public string fieldValue;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( file);
        byteArray.writeUTF( fieldName);
        byteArray.writeUTF( fileValueSH);
        byteArray.writeUTF( fieldValue);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        file = byteArray.readUTF();
        fieldName = byteArray.readUTF();
        fileValueSH = byteArray.readUTF();
        fieldValue = byteArray.readUTF();
        
      }
      
      public static Customizer SReadFromByteArray(ByteArray byteArray)
      {
          Customizer elem = new Customizer ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("Customizer:{");
          
          sb.AppendFormat(@" file  = ""{0}"",",file );
          
          sb.AppendFormat(@" fieldName  = ""{0}"",",fieldName );
          
          sb.AppendFormat(@" fileValueSH  = ""{0}"",",fileValueSH );
          
          sb.AppendFormat(@" fieldValue  = ""{0}"",",fieldValue );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class AppInstance
    {
      public string appId;
      public string versionId;
      public string instanceId;
      public string executable;
      public string folderr;
      public string param;
      public string startTime;
      public CustomizerSequence customizers;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( appId);
        byteArray.writeUTF( versionId);
        byteArray.writeUTF( instanceId);
        byteArray.writeUTF( executable);
        byteArray.writeUTF( folderr);
        byteArray.writeUTF( param);
        byteArray.writeUTF( startTime);
         customizers.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        appId = byteArray.readUTF();
        versionId = byteArray.readUTF();
        instanceId = byteArray.readUTF();
        executable = byteArray.readUTF();
        folderr = byteArray.readUTF();
        param = byteArray.readUTF();
        startTime = byteArray.readUTF();
        customizers = new CustomizerSequence();
			customizers.ReadFromByteArray(byteArray);
        
      }
      
      public static AppInstance SReadFromByteArray(ByteArray byteArray)
      {
          AppInstance elem = new AppInstance ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("AppInstance:{");
          
          sb.AppendFormat(@" appId  = ""{0}"",",appId );
          
          sb.AppendFormat(@" versionId  = ""{0}"",",versionId );
          
          sb.AppendFormat(@" instanceId  = ""{0}"",",instanceId );
          
          sb.AppendFormat(@" executable  = ""{0}"",",executable );
          
          sb.AppendFormat(@" folderr  = ""{0}"",",folderr );
          
          sb.AppendFormat(@" param  = ""{0}"",",param );
          
          sb.AppendFormat(@" startTime  = ""{0}"",",startTime );
          
          sb.AppendFormat(@" customizers  = ""{0}"",",customizers );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class MachineInfoSequence
    {
      private List<MachineInfo> _elements = new List<MachineInfo>();
      //private MachineInfo[] _elements;
      
      //public MachineInfo[] GetElements()
      public List<MachineInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<MachineInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(MachineInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (MachineInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static MachineInfoSequence SReadFromByteArray(ByteArray byteArray)
      {
            MachineInfoSequence result = new MachineInfoSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("MachineInfoSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class ApplicationInfoSequence
    {
      private List<ApplicationInfo> _elements = new List<ApplicationInfo>();
      //private ApplicationInfo[] _elements;
      
      //public ApplicationInfo[] GetElements()
      public List<ApplicationInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<ApplicationInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(ApplicationInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (ApplicationInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static ApplicationInfoSequence SReadFromByteArray(ByteArray byteArray)
      {
            ApplicationInfoSequence result = new ApplicationInfoSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("ApplicationInfoSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class VersionInfoSequence
    {
      private List<VersionInfo> _elements = new List<VersionInfo>();
      //private VersionInfo[] _elements;
      
      //public VersionInfo[] GetElements()
      public List<VersionInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<VersionInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(VersionInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (VersionInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static VersionInfoSequence SReadFromByteArray(ByteArray byteArray)
      {
            VersionInfoSequence result = new VersionInfoSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("VersionInfoSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class CustomizerSequence
    {
      private List<Customizer> _elements = new List<Customizer>();
      //private Customizer[] _elements;
      
      //public Customizer[] GetElements()
      public List<Customizer> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<Customizer>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(Customizer element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (Customizer.SReadFromByteArray(byteArray));
          }
      }
      
      public static CustomizerSequence SReadFromByteArray(ByteArray byteArray)
      {
            CustomizerSequence result = new CustomizerSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("CustomizerSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class AppInstanceSequence
    {
      private List<AppInstance> _elements = new List<AppInstance>();
      //private AppInstance[] _elements;
      
      //public AppInstance[] GetElements()
      public List<AppInstance> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<AppInstance>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(AppInstance element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (AppInstance.SReadFromByteArray(byteArray));
          }
      }
      
      public static AppInstanceSequence SReadFromByteArray(ByteArray byteArray)
      {
            AppInstanceSequence result = new AppInstanceSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("AppInstanceSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class StringSequence
    {
      private List<string> _elements = new List<string>();
      //private string[] _elements;
      
      //public string[] GetElements()
      public List<string> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<string>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(string element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              byteArray.writeUTF(_elements[i]); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (byteArray.readUTF());
          }
      }
      
      public static StringSequence SReadFromByteArray(ByteArray byteArray)
      {
            StringSequence result = new StringSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("StringSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    End Reference Codes*/
    #region Service And Interfaces
    
    internal class EnumDeamonMethods
    {
        
        public const int SERVER_GETINSTANCELIST_HASH = 1045462671;
        public const int SERVER_GETMACHINESTATE_HASH = 1892539690;
        public const int SERVER_DEPLOYINSTANCE_HASH = 1444973280;
        public const int SERVER_STARTINSTANCE_HASH = 1808252435;
        public const int SERVER_STOPINSTANCE_HASH = 1221711519;
        public const int CLIENT_GETINSTANCELISTRESPONSE_HASH = 369432928;
        public const int CLIENT_GETMACHINERESPONSE_HASH = 1561084926;
        public const int CLIENT_STARTINSTANCERESULT_HASH = -1393945162;
        public const int CLIENT_STOPINSTANCERESULT_HASH = -834766250;
        public const int CLIENT_REQUESTERROR_HASH = 328083517;
    }
    
    public class  DeamonClientHelper
    {
        public const string SOURCE_HASH = "73-E0-45-2E-31-5F-03-89-1E-CC-DF-04-1A-3A-C0-0C";

        
        public static ByteArray GetInstanceList(int appId)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_GETINSTANCELIST_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_GETINSTANCELIST_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeDynamicsInt(appId);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray GetMachineState()
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_GETMACHINESTATE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_GETMACHINESTATE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray DeployInstance(AppInstance instance)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_DEPLOYINSTANCE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_DEPLOYINSTANCE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            instance.WriteToByteArray(byteArray);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray StartInstance(string instanceId,string param)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_STARTINSTANCE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_STARTINSTANCE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(instanceId);byteArray.writeUTF(param);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray StopInstance(string instanceId)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_STOPINSTANCE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_STOPINSTANCE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(instanceId);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static void GetInstanceList(int appId, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_GETINSTANCELIST_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_GETINSTANCELIST_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeDynamicsInt(appId);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void GetMachineState( ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_GETMACHINESTATE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_GETMACHINESTATE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void DeployInstance(AppInstance instance, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_DEPLOYINSTANCE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_DEPLOYINSTANCE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            instance.WriteToByteArray(byteArray);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void StartInstance(string instanceId,string param, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_STARTINSTANCE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_STARTINSTANCE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(instanceId);byteArray.writeUTF(param);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void StopInstance(string instanceId, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumDeamonMethods.SERVER_STOPINSTANCE_HASH );
            byteArray.EncryptKey =  EnumDeamonMethods.SERVER_STOPINSTANCE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(instanceId);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumDeamonMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumDeamonMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IDeamonClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumDeamonMethods.CLIENT_GETINSTANCELISTRESPONSE_HASH: 
                byteArray.EncryptKey = EnumDeamonMethods.CLIENT_GETINSTANCELISTRESPONSE_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnGetInstanceListResponse(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumDeamonMethods.CLIENT_GETMACHINERESPONSE_HASH: 
                byteArray.EncryptKey = EnumDeamonMethods.CLIENT_GETMACHINERESPONSE_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnGetMachineResponse(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumDeamonMethods.CLIENT_STARTINSTANCERESULT_HASH: 
                byteArray.EncryptKey = EnumDeamonMethods.CLIENT_STARTINSTANCERESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnStartInstanceResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumDeamonMethods.CLIENT_STOPINSTANCERESULT_HASH: 
                byteArray.EncryptKey = EnumDeamonMethods.CLIENT_STOPINSTANCERESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnStopInstanceResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumDeamonMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumDeamonMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumDeamonMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumDeamonMethods.CLIENT_GETINSTANCELISTRESPONSE_HASH: 
                result = ParseGetInstanceListResponse(byteArray); 
                break;
            case EnumDeamonMethods.CLIENT_GETMACHINERESPONSE_HASH: 
                result = ParseGetMachineResponse(byteArray); 
                break;
            case EnumDeamonMethods.CLIENT_STARTINSTANCERESULT_HASH: 
                result = ParseStartInstanceResult(byteArray); 
                break;
            case EnumDeamonMethods.CLIENT_STOPINSTANCERESULT_HASH: 
                result = ParseStopInstanceResult(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnGetInstanceListResponse(ByteArray byteArray ,IDeamonClientService clientService)
        {
            AppInstanceSequence instances = new AppInstanceSequence();
			instances.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnGetInstanceListResponse(ref instances);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnGetMachineResponse(ByteArray byteArray ,IDeamonClientService clientService)
        {
            MachineInfo instances = new MachineInfo();
			instances.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnGetMachineResponse(ref instances);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnStartInstanceResult(ByteArray byteArray ,IDeamonClientService clientService)
        {
            int result = byteArray.readDynamicsInt();
            String message = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnStartInstanceResult( result, message);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnStopInstanceResult(ByteArray byteArray ,IDeamonClientService clientService)
        {
            int result = byteArray.readDynamicsInt();
            String message = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnStopInstanceResult( result, message);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IDeamonClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseGetInstanceListResponse(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("GetInstanceListResponse(");
            
            sb.Append("instances : AppInstanceSequence");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            AppInstanceSequence instances = new AppInstanceSequence();
			instances.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"instances = ""{0}""",  instances);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseGetMachineResponse(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("GetMachineResponse(");
            
            sb.Append("instances : MachineInfo");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            MachineInfo instances = new MachineInfo();
			instances.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"instances = ""{0}""",  instances);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseStartInstanceResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("StartInstanceResult(");
            
            sb.Append("result : int,");
            
            sb.Append("message : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int result = byteArray.readDynamicsInt();
            String message = byteArray.readUTF();
            sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"message = ""{0}""",  message);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseStopInstanceResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("StopInstanceResult(");
            
            sb.Append("result : int,");
            
            sb.Append("message : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int result = byteArray.readDynamicsInt();
            String message = byteArray.readUTF();
            sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"message = ""{0}""",  message);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IDeamonClientService
    {
        void OnGetInstanceListResponse(ref AppInstanceSequence instances);
        void OnGetMachineResponse(ref MachineInfo instances);
        void OnStartInstanceResult( int result, string message);
        void OnStopInstanceResult( int result, string message);
        
    }
  
    #endregion    //SECTION_TRANSACTIONS
    }
    // END OF GENERATED CODE
  