//source signature: [73-E0-45-2E-31-5F-03-89-1E-CC-DF-04-1A-3A-C0-0C]
    // Autogenerated at 2016/3/24 14:25:35.
    // Created by [CodeGenerator Library:1.7.3.2014.04.20.15.19] FOR Server Protocol.
    // Don't manully change this code unless you have to, all changes will be lost next time code is generated.
    // Copyright ideadynamo.com 2008-2012.
    namespace com.tieao.mmo.deamon
    {
    using System;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using com.ideadynamo.foundation;
    using com.ideadynamo.foundation.buffer;
    
    // set com.tieao.mmo.deamon
    #region enumerations
    
    #endregion    //SECTION_ENUM

    #region structures  // use class because struct's un-referenced behavior is not prefered
    
    [Serializable]
    public class MachineInfo
    {
      public string id;
      public int memory;
      public float cpu;
      public int cores;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( id);
        byteArray.writeDynamicsInt( memory);
        byteArray.writeFloat( cpu);
        byteArray.writeDynamicsInt( cores);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readUTF();
        memory = byteArray.readDynamicsInt();
        cpu = byteArray.readFloat();
        cores = byteArray.readDynamicsInt();
        
      }
      
      public static MachineInfo SReadFromByteArray(ByteArray byteArray)
      {
          MachineInfo elem = new MachineInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("MachineInfo:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" memory  = ""{0}"",",memory );
          
          sb.AppendFormat(@" cpu  = ""{0}"",",cpu );
          
          sb.AppendFormat(@" cores  = ""{0}"",",cores );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class ApplicationInfo
    {
      public string id;
      public string application;
      public string description;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( id);
        byteArray.writeUTF( application);
        byteArray.writeUTF( description);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readUTF();
        application = byteArray.readUTF();
        description = byteArray.readUTF();
        
      }
      
      public static ApplicationInfo SReadFromByteArray(ByteArray byteArray)
      {
          ApplicationInfo elem = new ApplicationInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("ApplicationInfo:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" application  = ""{0}"",",application );
          
          sb.AppendFormat(@" description  = ""{0}"",",description );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class VersionInfo
    {
      public string id;
      public string application;
      public string folder;
      public string releaseDate;
      public int instances;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( id);
        byteArray.writeUTF( application);
        byteArray.writeUTF( folder);
        byteArray.writeUTF( releaseDate);
        byteArray.writeDynamicsInt( instances);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        id = byteArray.readUTF();
        application = byteArray.readUTF();
        folder = byteArray.readUTF();
        releaseDate = byteArray.readUTF();
        instances = byteArray.readDynamicsInt();
        
      }
      
      public static VersionInfo SReadFromByteArray(ByteArray byteArray)
      {
          VersionInfo elem = new VersionInfo ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("VersionInfo:{");
          
          sb.AppendFormat(@" id  = ""{0}"",",id );
          
          sb.AppendFormat(@" application  = ""{0}"",",application );
          
          sb.AppendFormat(@" folder  = ""{0}"",",folder );
          
          sb.AppendFormat(@" releaseDate  = ""{0}"",",releaseDate );
          
          sb.AppendFormat(@" instances  = ""{0}"",",instances );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class Customizer
    {
      public string file;
      public string fieldName;
      public string fileValueSH;
      public string fieldValue;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( file);
        byteArray.writeUTF( fieldName);
        byteArray.writeUTF( fileValueSH);
        byteArray.writeUTF( fieldValue);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        file = byteArray.readUTF();
        fieldName = byteArray.readUTF();
        fileValueSH = byteArray.readUTF();
        fieldValue = byteArray.readUTF();
        
      }
      
      public static Customizer SReadFromByteArray(ByteArray byteArray)
      {
          Customizer elem = new Customizer ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("Customizer:{");
          
          sb.AppendFormat(@" file  = ""{0}"",",file );
          
          sb.AppendFormat(@" fieldName  = ""{0}"",",fieldName );
          
          sb.AppendFormat(@" fileValueSH  = ""{0}"",",fileValueSH );
          
          sb.AppendFormat(@" fieldValue  = ""{0}"",",fieldValue );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class AppInstance
    {
      public string appId;
      public string versionId;
      public string instanceId;
      public string executable;
      public string folderr;
      public string param;
      public string startTime;
      public CustomizerSequence customizers;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeUTF( appId);
        byteArray.writeUTF( versionId);
        byteArray.writeUTF( instanceId);
        byteArray.writeUTF( executable);
        byteArray.writeUTF( folderr);
        byteArray.writeUTF( param);
        byteArray.writeUTF( startTime);
         customizers.WriteToByteArray(byteArray);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        appId = byteArray.readUTF();
        versionId = byteArray.readUTF();
        instanceId = byteArray.readUTF();
        executable = byteArray.readUTF();
        folderr = byteArray.readUTF();
        param = byteArray.readUTF();
        startTime = byteArray.readUTF();
        customizers = new CustomizerSequence();
			customizers.ReadFromByteArray(byteArray);
        
      }
      
      public static AppInstance SReadFromByteArray(ByteArray byteArray)
      {
          AppInstance elem = new AppInstance ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("AppInstance:{");
          
          sb.AppendFormat(@" appId  = ""{0}"",",appId );
          
          sb.AppendFormat(@" versionId  = ""{0}"",",versionId );
          
          sb.AppendFormat(@" instanceId  = ""{0}"",",instanceId );
          
          sb.AppendFormat(@" executable  = ""{0}"",",executable );
          
          sb.AppendFormat(@" folderr  = ""{0}"",",folderr );
          
          sb.AppendFormat(@" param  = ""{0}"",",param );
          
          sb.AppendFormat(@" startTime  = ""{0}"",",startTime );
          
          sb.AppendFormat(@" customizers  = ""{0}"",",customizers );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    #endregion    //SECTION_STRUCTURE

    #region sequences
    
    [Serializable]
    public class MachineInfoSequence
    {
      private List<MachineInfo> _elements = new List<MachineInfo>();
      //private MachineInfo[] _elements;
      
      //public MachineInfo[] GetElements()
      public List<MachineInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<MachineInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(MachineInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (MachineInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static MachineInfoSequence SReadFromByteArray(ByteArray byteArray)
      {
            MachineInfoSequence result = new MachineInfoSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("MachineInfoSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class ApplicationInfoSequence
    {
      private List<ApplicationInfo> _elements = new List<ApplicationInfo>();
      //private ApplicationInfo[] _elements;
      
      //public ApplicationInfo[] GetElements()
      public List<ApplicationInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<ApplicationInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(ApplicationInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (ApplicationInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static ApplicationInfoSequence SReadFromByteArray(ByteArray byteArray)
      {
            ApplicationInfoSequence result = new ApplicationInfoSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("ApplicationInfoSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class VersionInfoSequence
    {
      private List<VersionInfo> _elements = new List<VersionInfo>();
      //private VersionInfo[] _elements;
      
      //public VersionInfo[] GetElements()
      public List<VersionInfo> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<VersionInfo>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(VersionInfo element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (VersionInfo.SReadFromByteArray(byteArray));
          }
      }
      
      public static VersionInfoSequence SReadFromByteArray(ByteArray byteArray)
      {
            VersionInfoSequence result = new VersionInfoSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("VersionInfoSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class CustomizerSequence
    {
      private List<Customizer> _elements = new List<Customizer>();
      //private Customizer[] _elements;
      
      //public Customizer[] GetElements()
      public List<Customizer> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<Customizer>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(Customizer element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (Customizer.SReadFromByteArray(byteArray));
          }
      }
      
      public static CustomizerSequence SReadFromByteArray(ByteArray byteArray)
      {
            CustomizerSequence result = new CustomizerSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("CustomizerSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class AppInstanceSequence
    {
      private List<AppInstance> _elements = new List<AppInstance>();
      //private AppInstance[] _elements;
      
      //public AppInstance[] GetElements()
      public List<AppInstance> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<AppInstance>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(AppInstance element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              _elements[i].WriteToByteArray(byteArray); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (AppInstance.SReadFromByteArray(byteArray));
          }
      }
      
      public static AppInstanceSequence SReadFromByteArray(ByteArray byteArray)
      {
            AppInstanceSequence result = new AppInstanceSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("AppInstanceSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    [Serializable]
    public class StringSequence
    {
      private List<string> _elements = new List<string>();
      //private string[] _elements;
      
      //public string[] GetElements()
      public List<string> GetElements()
      {
          return _elements;
      }
      
      public void SetElemenets(IList<string>  elements)
      {
          _elements.Clear();
          _elements.AddRange(elements);
      }
      
      public void Add(string element)
      {
          _elements.Add(element);
      }

      public void WriteToByteArray(ByteArray byteArray)
      {
          byteArray.writeDynamicsInt(_elements.Count);

          for(int i = 0; i < _elements.Count ; i ++)
          {
              byteArray.writeUTF(_elements[i]); 
          }
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
          int cnt = byteArray.readDynamicsInt();
          for(int i = 0; i < cnt ; i ++)
          {
              _elements.Add (byteArray.readUTF());
          }
      }
      
      public static StringSequence SReadFromByteArray(ByteArray byteArray)
      {
            StringSequence result = new StringSequence();
            result.ReadFromByteArray(byteArray);
            return result;
      }
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.AppendFormat("StringSequence,{0} Elements [ ",_elements.Count);
          for(int i =0 ; i < _elements.Count ; i ++)
          {
              sb.AppendFormat(@"{0} : ""{1}"",",i ,_elements[i] );
              if(i % 3 == 2 && i < _elements.Count -1) sb.Append("\r\n");
          }

          sb.Append("]");
          return sb.ToString();
      }
    }
  
    #endregion    //SECTION_SEQUENCE

    #region directory
    
    #endregion    //SECTION_DIRECTORY
    }
    // END OF GENERATED CODE
  