//source signature: [DE-73-AD-8B-D0-C0-C3-D1-79-25-52-7D-EA-09-09-3A]
// Autogenerated at 2016/3/24 14:25:35
// Created by [CodeGenerator Library:1.7.3.2014.04.20.15.19] FOR Client Protocol.
// Don't manully change this code unless you have to, all changes will be lost next time code is generated.
// Copyright ideadynamo.com 2008-2012.
namespace com.tieao.mmo.deamon.client
{
    using System;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using com.ideadynamo.foundation;
    using com.ideadynamo.foundation.buffer;
    using com.tieao.mmo.deamon;
    
    // set com.tieao.mmo.deamon
    /*Reference Codes
    
    [Serializable]
    public class WorldState
    {
      public int timestamp;
      public int logons;
      public float sdkresponse;
      public int refills;
      public int refilltotal;
      public int serials;
      public int lastlogontime;
      public int newusers;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( timestamp);
        byteArray.writeDynamicsInt( logons);
        byteArray.writeFloat( sdkresponse);
        byteArray.writeDynamicsInt( refills);
        byteArray.writeDynamicsInt( refilltotal);
        byteArray.writeDynamicsInt( serials);
        byteArray.writeDynamicsInt( lastlogontime);
        byteArray.writeDynamicsInt( newusers);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        timestamp = byteArray.readDynamicsInt();
        logons = byteArray.readDynamicsInt();
        sdkresponse = byteArray.readFloat();
        refills = byteArray.readDynamicsInt();
        refilltotal = byteArray.readDynamicsInt();
        serials = byteArray.readDynamicsInt();
        lastlogontime = byteArray.readDynamicsInt();
        newusers = byteArray.readDynamicsInt();
        
      }
      
      public static WorldState SReadFromByteArray(ByteArray byteArray)
      {
          WorldState elem = new WorldState ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("WorldState:{");
          
          sb.AppendFormat(@" timestamp  = ""{0}"",",timestamp );
          
          sb.AppendFormat(@" logons  = ""{0}"",",logons );
          
          sb.AppendFormat(@" sdkresponse  = ""{0}"",",sdkresponse );
          
          sb.AppendFormat(@" refills  = ""{0}"",",refills );
          
          sb.AppendFormat(@" refilltotal  = ""{0}"",",refilltotal );
          
          sb.AppendFormat(@" serials  = ""{0}"",",serials );
          
          sb.AppendFormat(@" lastlogontime  = ""{0}"",",lastlogontime );
          
          sb.AppendFormat(@" newusers  = ""{0}"",",newusers );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class VillageState
    {
      public int timestamp;
      public int logons;
      public float logonresponse;
      public int paymenttoday;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( timestamp);
        byteArray.writeDynamicsInt( logons);
        byteArray.writeFloat( logonresponse);
        byteArray.writeDynamicsInt( paymenttoday);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        timestamp = byteArray.readDynamicsInt();
        logons = byteArray.readDynamicsInt();
        logonresponse = byteArray.readFloat();
        paymenttoday = byteArray.readDynamicsInt();
        
      }
      
      public static VillageState SReadFromByteArray(ByteArray byteArray)
      {
          VillageState elem = new VillageState ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("VillageState:{");
          
          sb.AppendFormat(@" timestamp  = ""{0}"",",timestamp );
          
          sb.AppendFormat(@" logons  = ""{0}"",",logons );
          
          sb.AppendFormat(@" logonresponse  = ""{0}"",",logonresponse );
          
          sb.AppendFormat(@" paymenttoday  = ""{0}"",",paymenttoday );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class PortalState
    {
      public int timestamp;
      public int logons;
      public float logonresponse;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( timestamp);
        byteArray.writeDynamicsInt( logons);
        byteArray.writeFloat( logonresponse);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        timestamp = byteArray.readDynamicsInt();
        logons = byteArray.readDynamicsInt();
        logonresponse = byteArray.readFloat();
        
      }
      
      public static PortalState SReadFromByteArray(ByteArray byteArray)
      {
          PortalState elem = new PortalState ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("PortalState:{");
          
          sb.AppendFormat(@" timestamp  = ""{0}"",",timestamp );
          
          sb.AppendFormat(@" logons  = ""{0}"",",logons );
          
          sb.AppendFormat(@" logonresponse  = ""{0}"",",logonresponse );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class UpdaterState
    {
      public int timestamp;
      public string andoirdapp;
      public string andoirdres;
      public string iosapp;
      public string iosres;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( timestamp);
        byteArray.writeUTF( andoirdapp);
        byteArray.writeUTF( andoirdres);
        byteArray.writeUTF( iosapp);
        byteArray.writeUTF( iosres);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        timestamp = byteArray.readDynamicsInt();
        andoirdapp = byteArray.readUTF();
        andoirdres = byteArray.readUTF();
        iosapp = byteArray.readUTF();
        iosres = byteArray.readUTF();
        
      }
      
      public static UpdaterState SReadFromByteArray(ByteArray byteArray)
      {
          UpdaterState elem = new UpdaterState ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("UpdaterState:{");
          
          sb.AppendFormat(@" timestamp  = ""{0}"",",timestamp );
          
          sb.AppendFormat(@" andoirdapp  = ""{0}"",",andoirdapp );
          
          sb.AppendFormat(@" andoirdres  = ""{0}"",",andoirdres );
          
          sb.AppendFormat(@" iosapp  = ""{0}"",",iosapp );
          
          sb.AppendFormat(@" iosres  = ""{0}"",",iosres );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    [Serializable]
    public class BattleState
    {
      public int timestamp;
      public string currentcount;
      public string maxcount;
      

      public void WriteToByteArray(ByteArray byteArray)
      {
        byteArray.writeDynamicsInt( timestamp);
        byteArray.writeUTF( currentcount);
        byteArray.writeUTF( maxcount);
        
      }

      public void ReadFromByteArray(ByteArray byteArray)
      {
        timestamp = byteArray.readDynamicsInt();
        currentcount = byteArray.readUTF();
        maxcount = byteArray.readUTF();
        
      }
      
      public static BattleState SReadFromByteArray(ByteArray byteArray)
      {
          BattleState elem = new BattleState ();
          elem.ReadFromByteArray(byteArray);
          return elem;
      }
      
      
      public override string ToString()
      {
          StringBuilder sb = new StringBuilder();
          sb.Append("BattleState:{");
          
          sb.AppendFormat(@" timestamp  = ""{0}"",",timestamp );
          
          sb.AppendFormat(@" currentcount  = ""{0}"",",currentcount );
          
          sb.AppendFormat(@" maxcount  = ""{0}"",",maxcount );
          
          sb.Remove(sb.Length - 1, 1);
          sb.Append("}");
          return sb.ToString();
      }
  }
  
    End Reference Codes*/
    #region Service And Interfaces
    
    internal class EnumMonitorMethods
    {
        
        public const int SERVER_QUERYSTATUS_HASH = 1921645312;
        public const int SERVER_EXECUTECOMMAND_HASH = -325838586;
        public const int CLIENT_STATUSREPORT_HASH = 1012794114;
        public const int CLIENT_SENDMESSAGE_HASH = 1289645117;
        public const int CLIENT_COMMANDRESULT_HASH = 1368138742;
        public const int CLIENT_REQUESTERROR_HASH = -322979391;
    }
    
    public class  MonitorClientHelper
    {
        public const string SOURCE_HASH = "DE-73-AD-8B-D0-C0-C3-D1-79-25-52-7D-EA-09-09-3A";

        
        public static ByteArray QueryStatus(int catagory)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumMonitorMethods.SERVER_QUERYSTATUS_HASH );
            byteArray.EncryptKey =  EnumMonitorMethods.SERVER_QUERYSTATUS_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeDynamicsInt(catagory);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray ExecuteCommand(string command)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumMonitorMethods.SERVER_EXECUTECOMMAND_HASH );
            byteArray.EncryptKey =  EnumMonitorMethods.SERVER_EXECUTECOMMAND_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(command);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static void QueryStatus(int catagory, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumMonitorMethods.SERVER_QUERYSTATUS_HASH );
            byteArray.EncryptKey =  EnumMonitorMethods.SERVER_QUERYSTATUS_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeDynamicsInt(catagory);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void ExecuteCommand(string command, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumMonitorMethods.SERVER_EXECUTECOMMAND_HASH );
            byteArray.EncryptKey =  EnumMonitorMethods.SERVER_EXECUTECOMMAND_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(command);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumMonitorMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumMonitorMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IMonitorClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumMonitorMethods.CLIENT_STATUSREPORT_HASH: 
                byteArray.EncryptKey = EnumMonitorMethods.CLIENT_STATUSREPORT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnStatusReport(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumMonitorMethods.CLIENT_SENDMESSAGE_HASH: 
                byteArray.EncryptKey = EnumMonitorMethods.CLIENT_SENDMESSAGE_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnSendMessage(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumMonitorMethods.CLIENT_COMMANDRESULT_HASH: 
                byteArray.EncryptKey = EnumMonitorMethods.CLIENT_COMMANDRESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnCommandResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumMonitorMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumMonitorMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumMonitorMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumMonitorMethods.CLIENT_STATUSREPORT_HASH: 
                result = ParseStatusReport(byteArray); 
                break;
            case EnumMonitorMethods.CLIENT_SENDMESSAGE_HASH: 
                result = ParseSendMessage(byteArray); 
                break;
            case EnumMonitorMethods.CLIENT_COMMANDRESULT_HASH: 
                result = ParseCommandResult(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnStatusReport(ByteArray byteArray ,IMonitorClientService clientService)
        {
            ByteArray status = ByteArray.SReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnStatusReport(ref status);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnSendMessage(ByteArray byteArray ,IMonitorClientService clientService)
        {
            String message = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnSendMessage( message);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnCommandResult(ByteArray byteArray ,IMonitorClientService clientService)
        {
            String command = byteArray.readUTF();
            int result = byteArray.readDynamicsInt();
            String message = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnCommandResult( command, result, message);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IMonitorClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseStatusReport(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("StatusReport(");
            
            sb.Append("status : ByteArray");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            ByteArray status = ByteArray.SReadFromByteArray(byteArray);
            sb.AppendFormat(@"status = ""{0}""",  status);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseSendMessage(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SendMessage(");
            
            sb.Append("message : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            String message = byteArray.readUTF();
            sb.AppendFormat(@"message = ""{0}""",  message);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseCommandResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("CommandResult(");
            
            sb.Append("command : string,");
            
            sb.Append("result : int,");
            
            sb.Append("message : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            String command = byteArray.readUTF();
            int result = byteArray.readDynamicsInt();
            String message = byteArray.readUTF();
            sb.AppendFormat(@"command = ""{0}""",  command);sb.Append(",\r\n");sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"message = ""{0}""",  message);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IMonitorClientService
    {
        void OnStatusReport(ref ByteArray status);
        void OnSendMessage( string message);
        void OnCommandResult( string command, int result, string message);
        
    }
  
    internal class EnumWorldReportMethods
    {
        
        public const int CLIENT_REPORTSTATUS_HASH = -932721042;
        public const int CLIENT_REQUESTERROR_HASH = -232571275;
    }
    
    public class  WorldReportClientHelper
    {
        public const string SOURCE_HASH = "DE-73-AD-8B-D0-C0-C3-D1-79-25-52-7D-EA-09-09-3A";

        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumWorldReportMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumWorldReportMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IWorldReportClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumWorldReportMethods.CLIENT_REPORTSTATUS_HASH: 
                byteArray.EncryptKey = EnumWorldReportMethods.CLIENT_REPORTSTATUS_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnReportStatus(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumWorldReportMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumWorldReportMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumWorldReportMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumWorldReportMethods.CLIENT_REPORTSTATUS_HASH: 
                result = ParseReportStatus(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnReportStatus(ByteArray byteArray ,IWorldReportClientService clientService)
        {
            WorldState status = new WorldState();
			status.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnReportStatus(ref status);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IWorldReportClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseReportStatus(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("ReportStatus(");
            
            sb.Append("status : WorldState");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            WorldState status = new WorldState();
			status.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"status = ""{0}""",  status);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IWorldReportClientService
    {
        void OnReportStatus(ref WorldState status);
        
    }
  
    internal class EnumVillageReportMethods
    {
        
        public const int CLIENT_REPORTSTATUS_HASH = -359375886;
        public const int CLIENT_REQUESTERROR_HASH = 876672191;
    }
    
    public class  VillageReportClientHelper
    {
        public const string SOURCE_HASH = "DE-73-AD-8B-D0-C0-C3-D1-79-25-52-7D-EA-09-09-3A";

        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumVillageReportMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumVillageReportMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IVillageReportClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumVillageReportMethods.CLIENT_REPORTSTATUS_HASH: 
                byteArray.EncryptKey = EnumVillageReportMethods.CLIENT_REPORTSTATUS_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnReportStatus(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumVillageReportMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumVillageReportMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumVillageReportMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumVillageReportMethods.CLIENT_REPORTSTATUS_HASH: 
                result = ParseReportStatus(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnReportStatus(ByteArray byteArray ,IVillageReportClientService clientService)
        {
            VillageState status = new VillageState();
			status.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnReportStatus(ref status);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IVillageReportClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseReportStatus(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("ReportStatus(");
            
            sb.Append("status : VillageState");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            VillageState status = new VillageState();
			status.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"status = ""{0}""",  status);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IVillageReportClientService
    {
        void OnReportStatus(ref VillageState status);
        
    }
  
    internal class EnumPortalReportMethods
    {
        
        public const int CLIENT_REPORTSTATUS_HASH = 407451456;
        public const int CLIENT_REQUESTERROR_HASH = 1256294063;
    }
    
    public class  PortalReportClientHelper
    {
        public const string SOURCE_HASH = "DE-73-AD-8B-D0-C0-C3-D1-79-25-52-7D-EA-09-09-3A";

        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumPortalReportMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumPortalReportMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IPortalReportClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumPortalReportMethods.CLIENT_REPORTSTATUS_HASH: 
                byteArray.EncryptKey = EnumPortalReportMethods.CLIENT_REPORTSTATUS_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnReportStatus(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumPortalReportMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumPortalReportMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumPortalReportMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumPortalReportMethods.CLIENT_REPORTSTATUS_HASH: 
                result = ParseReportStatus(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnReportStatus(ByteArray byteArray ,IPortalReportClientService clientService)
        {
            PortalState status = new PortalState();
			status.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnReportStatus(ref status);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IPortalReportClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseReportStatus(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("ReportStatus(");
            
            sb.Append("status : PortalState");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            PortalState status = new PortalState();
			status.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"status = ""{0}""",  status);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IPortalReportClientService
    {
        void OnReportStatus(ref PortalState status);
        
    }
  
    internal class EnumUpdaterReportMethods
    {
        
        public const int CLIENT_REPORTSTATUS_HASH = 268422801;
        public const int CLIENT_REQUESTERROR_HASH = 1540877354;
    }
    
    public class  UpdaterReportClientHelper
    {
        public const string SOURCE_HASH = "DE-73-AD-8B-D0-C0-C3-D1-79-25-52-7D-EA-09-09-3A";

        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumUpdaterReportMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumUpdaterReportMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IUpdaterReportClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumUpdaterReportMethods.CLIENT_REPORTSTATUS_HASH: 
                byteArray.EncryptKey = EnumUpdaterReportMethods.CLIENT_REPORTSTATUS_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnReportStatus(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumUpdaterReportMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumUpdaterReportMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumUpdaterReportMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumUpdaterReportMethods.CLIENT_REPORTSTATUS_HASH: 
                result = ParseReportStatus(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnReportStatus(ByteArray byteArray ,IUpdaterReportClientService clientService)
        {
            UpdaterState status = new UpdaterState();
			status.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnReportStatus(ref status);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IUpdaterReportClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseReportStatus(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("ReportStatus(");
            
            sb.Append("status : UpdaterState");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            UpdaterState status = new UpdaterState();
			status.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"status = ""{0}""",  status);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IUpdaterReportClientService
    {
        void OnReportStatus(ref UpdaterState status);
        
    }
  
    internal class EnumBattleReportMethods
    {
        
        public const int CLIENT_REPORTSTATUS_HASH = -155195824;
        public const int CLIENT_REQUESTERROR_HASH = 235164469;
    }
    
    public class  BattleReportClientHelper
    {
        public const string SOURCE_HASH = "DE-73-AD-8B-D0-C0-C3-D1-79-25-52-7D-EA-09-09-3A";

        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumBattleReportMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumBattleReportMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IBattleReportClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumBattleReportMethods.CLIENT_REPORTSTATUS_HASH: 
                byteArray.EncryptKey = EnumBattleReportMethods.CLIENT_REPORTSTATUS_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnReportStatus(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumBattleReportMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumBattleReportMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumBattleReportMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumBattleReportMethods.CLIENT_REPORTSTATUS_HASH: 
                result = ParseReportStatus(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnReportStatus(ByteArray byteArray ,IBattleReportClientService clientService)
        {
            BattleState status = new BattleState();
			status.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnReportStatus(ref status);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IBattleReportClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseReportStatus(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("ReportStatus(");
            
            sb.Append("status : BattleState");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            BattleState status = new BattleState();
			status.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"status = ""{0}""",  status);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IBattleReportClientService
    {
        void OnReportStatus(ref BattleState status);
        
    }
  
    #endregion    //SECTION_TRANSACTIONS
    }
    // END OF GENERATED CODE
  