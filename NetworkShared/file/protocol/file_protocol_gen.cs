//source signature: [D4-D2-43-05-CF-01-AF-B2-92-1F-E1-DE-88-B6-F0-A5]
// Autogenerated at 2016/3/24 14:25:33
// Created by [CodeGenerator Library:1.7.3.2014.04.20.15.19] FOR Client Protocol.
// Don't manully change this code unless you have to, all changes will be lost next time code is generated.
// Copyright ideadynamo.com 2008-2012.
namespace com.tieao.mmo.deamon.client
{
    using System;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using com.ideadynamo.foundation;
    using com.ideadynamo.foundation.buffer;
    using com.tieao.mmo.deamon;
    
    // set com.tieao.mmo.deamon
    /*Reference Codes
    
    End Reference Codes*/
    #region Service And Interfaces
    
    internal class EnumFileMethods
    {
        
        public const int SERVER_REQUESTFILESEND_HASH = 2083090803;
        public const int SERVER_REQUESTFILEBLOCK_HASH = 105015786;
        public const int SERVER_STARTBATCH_HASH = -825162526;
        public const int SERVER_BATCHCOMPLETE_HASH = -1057594927;
        public const int SERVER_CREATEDIRECTORY_HASH = -519248151;
        public const int SERVER_LISTDIRECTORYS_HASH = -1562808378;
        public const int SERVER_DELETEDIRECTORY_HASH = -229624900;
        public const int SERVER_DELETEFILE_HASH = 1362483483;
        public const int SERVER_SETWORKINGDIRECTORY_HASH = 913806740;
        public const int SERVER_SENDDIRECTORYFAILED_HASH = -1342594702;
        public const int SERVER_SENDFILEFAILED_HASH = 1185080645;
        public const int CLIENT_REQUESTFILEDOWNLOAD_HASH = 2012624783;
        public const int CLIENT_FILESENDRESPONSE_HASH = -31584443;
        public const int CLIENT_SENDFINISHRESPONSE_HASH = -1998973432;
        public const int CLIENT_FILEBLOCKRESPONSE_HASH = 593320382;
        public const int CLIENT_CREATEDIRECTORYRESULT_HASH = -2072428732;
        public const int CLIENT_LISTDIRECTORYSRESULT_HASH = 1856640093;
        public const int CLIENT_DELETEDIRECTORYRESULT_HASH = -695136055;
        public const int CLIENT_DELETEFILERESULT_HASH = -1098610262;
        public const int CLIENT_SETWORKINGDIRECTORYRESULT_HASH = 1821639015;
        public const int CLIENT_REQUESTERROR_HASH = -983351465;
    }
    
    public class  FileClientHelper
    {
        public const string SOURCE_HASH = "D4-D2-43-05-CF-01-AF-B2-92-1F-E1-DE-88-B6-F0-A5";

        
        public static ByteArray RequestFileSend(String file,int uploadToken,int size)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_REQUESTFILESEND_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_REQUESTFILESEND_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(file);byteArray.writeDynamicsInt(uploadToken);byteArray.writeDynamicsInt(size);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray RequestFileBlock(String file,int blockId,int size,ByteArray stream,int special)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_REQUESTFILEBLOCK_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_REQUESTFILEBLOCK_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(file);byteArray.writeDynamicsInt(blockId);byteArray.writeDynamicsInt(size);stream.WriteToByteArray(byteArray);byteArray.writeDynamicsInt(special);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray StartBatch(string name)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_STARTBATCH_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_STARTBATCH_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray BatchComplete(bool success,string name)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_BATCHCOMPLETE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_BATCHCOMPLETE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeBoolean(success);byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray CreateDirectory(string name)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_CREATEDIRECTORY_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_CREATEDIRECTORY_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray ListDirectorys(string name)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_LISTDIRECTORYS_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_LISTDIRECTORYS_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray DeleteDirectory(string name)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_DELETEDIRECTORY_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_DELETEDIRECTORY_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray DeleteFile(string name)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_DELETEFILE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_DELETEFILE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray SetWorkingDirectory(string name)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_SETWORKINGDIRECTORY_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_SETWORKINGDIRECTORY_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray SendDirectoryFailed()
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_SENDDIRECTORYFAILED_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_SENDDIRECTORYFAILED_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray SendFileFailed(string name,string reason)
        {
        #if NO_BUFFER
            ByteArray byteArray = new ByteArray();
        #else
            ByteArray byteArray = BufferQueue.ClientBuffer.GetSendBuffer(0);
        #endif
            
            byteArray.writeInt( EnumFileMethods.SERVER_SENDFILEFAILED_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_SENDFILEFAILED_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);byteArray.writeUTF(reason);
          
            ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static void RequestFileSend(String file,int uploadToken,int size, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_REQUESTFILESEND_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_REQUESTFILESEND_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(file);byteArray.writeDynamicsInt(uploadToken);byteArray.writeDynamicsInt(size);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void RequestFileBlock(String file,int blockId,int size,ByteArray stream,int special, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_REQUESTFILEBLOCK_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_REQUESTFILEBLOCK_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(file);byteArray.writeDynamicsInt(blockId);byteArray.writeDynamicsInt(size);stream.WriteToByteArray(byteArray);byteArray.writeDynamicsInt(special);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void StartBatch(string name, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_STARTBATCH_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_STARTBATCH_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void BatchComplete(bool success,string name, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_BATCHCOMPLETE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_BATCHCOMPLETE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeBoolean(success);byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void CreateDirectory(string name, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_CREATEDIRECTORY_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_CREATEDIRECTORY_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void ListDirectorys(string name, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_LISTDIRECTORYS_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_LISTDIRECTORYS_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void DeleteDirectory(string name, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_DELETEDIRECTORY_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_DELETEDIRECTORY_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void DeleteFile(string name, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_DELETEFILE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_DELETEFILE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void SetWorkingDirectory(string name, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_SETWORKINGDIRECTORY_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_SETWORKINGDIRECTORY_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void SendDirectoryFailed( ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_SENDDIRECTORYFAILED_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_SENDDIRECTORYFAILED_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void SendFileFailed(string name,string reason, ref ByteArray byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
                        
            
            byteArray.writeInt( EnumFileMethods.SERVER_SENDFILEFAILED_HASH );
            byteArray.EncryptKey =  EnumFileMethods.SERVER_SENDFILEFAILED_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);

            byteArray.writeUTF(name);byteArray.writeUTF(reason);
          
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumFileMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static bool IntepretMessage(ByteArray byteArray,IFileClientService clientService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
            
            case EnumFileMethods.CLIENT_REQUESTFILEDOWNLOAD_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_REQUESTFILEDOWNLOAD_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnRequestFileDownload(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_FILESENDRESPONSE_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_FILESENDRESPONSE_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnFileSendResponse(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_SENDFINISHRESPONSE_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_SENDFINISHRESPONSE_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnSendFinishResponse(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_FILEBLOCKRESPONSE_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_FILEBLOCKRESPONSE_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnFileBlockResponse(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_CREATEDIRECTORYRESULT_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_CREATEDIRECTORYRESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnCreateDirectoryResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_LISTDIRECTORYSRESULT_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_LISTDIRECTORYSRESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnListDirectorysResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_DELETEDIRECTORYRESULT_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_DELETEDIRECTORYRESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnDeleteDirectoryResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_DELETEFILERESULT_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_DELETEFILERESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnDeleteFileResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
            case EnumFileMethods.CLIENT_SETWORKINGDIRECTORYRESULT_HASH: 
                byteArray.EncryptKey = EnumFileMethods.CLIENT_SETWORKINGDIRECTORYRESULT_HASH;
                byteArray.CRC = 0;
                byteArray.readDynamicsInt();
                mtdrst__ = OnSetWorkingDirectoryResult(byteArray , clientService);
                byteArray.EncryptKey =  0;
                return mtdrst__;
        
            case EnumFileMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumFileMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , clientService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            if(methodID == EnumFileMethods.CLIENT_REQUESTERROR_HASH)
            {
                return OnClientRequestError__(byteArray , clientService);
            }
            // recover the header
            byteArray.Rewind();
            return false;
        }
        
        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumFileMethods.CLIENT_REQUESTFILEDOWNLOAD_HASH: 
                result = ParseRequestFileDownload(byteArray); 
                break;
            case EnumFileMethods.CLIENT_FILESENDRESPONSE_HASH: 
                result = ParseFileSendResponse(byteArray); 
                break;
            case EnumFileMethods.CLIENT_SENDFINISHRESPONSE_HASH: 
                result = ParseSendFinishResponse(byteArray); 
                break;
            case EnumFileMethods.CLIENT_FILEBLOCKRESPONSE_HASH: 
                result = ParseFileBlockResponse(byteArray); 
                break;
            case EnumFileMethods.CLIENT_CREATEDIRECTORYRESULT_HASH: 
                result = ParseCreateDirectoryResult(byteArray); 
                break;
            case EnumFileMethods.CLIENT_LISTDIRECTORYSRESULT_HASH: 
                result = ParseListDirectorysResult(byteArray); 
                break;
            case EnumFileMethods.CLIENT_DELETEDIRECTORYRESULT_HASH: 
                result = ParseDeleteDirectoryResult(byteArray); 
                break;
            case EnumFileMethods.CLIENT_DELETEFILERESULT_HASH: 
                result = ParseDeleteFileResult(byteArray); 
                break;
            case EnumFileMethods.CLIENT_SETWORKINGDIRECTORYRESULT_HASH: 
                result = ParseSetWorkingDirectoryResult(byteArray); 
                break;               
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnRequestFileDownload(ByteArray byteArray ,IFileClientService clientService)
        {
            String file = byteArray.readUTF();
            String remoteFile = byteArray.readUTF();
            bool isDir = byteArray.readBoolean();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnRequestFileDownload( file, remoteFile, isDir);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnFileSendResponse(ByteArray byteArray ,IFileClientService clientService)
        {
            int file = byteArray.readDynamicsInt();
            int uploadToken = byteArray.readDynamicsInt();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnFileSendResponse( file, uploadToken);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnSendFinishResponse(ByteArray byteArray ,IFileClientService clientService)
        {
            int file = byteArray.readDynamicsInt();
            int totalSize = byteArray.readDynamicsInt();
            int expectSize = byteArray.readDynamicsInt();
            String md5 = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnSendFinishResponse( file, totalSize, expectSize, md5);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnFileBlockResponse(ByteArray byteArray ,IFileClientService clientService)
        {
            int file = byteArray.readDynamicsInt();
            int blockId = byteArray.readDynamicsInt();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnFileBlockResponse( file, blockId);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnCreateDirectoryResult(ByteArray byteArray ,IFileClientService clientService)
        {
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnCreateDirectoryResult( result, desc);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnListDirectorysResult(ByteArray byteArray ,IFileClientService clientService)
        {
            int result = byteArray.readDynamicsInt();
            StringSequence directories = new StringSequence();
			directories.ReadFromByteArray(byteArray);
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnListDirectorysResult( result,ref directories);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnDeleteDirectoryResult(ByteArray byteArray ,IFileClientService clientService)
        {
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnDeleteDirectoryResult( result, desc);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnDeleteFileResult(ByteArray byteArray ,IFileClientService clientService)
        {
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnDeleteFileResult( result, desc);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnSetWorkingDirectoryResult(ByteArray byteArray ,IFileClientService clientService)
        {
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
                clientService.OnSetWorkingDirectoryResult( result, desc);
            }
            
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IFileClientService clientService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseRequestFileDownload(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("RequestFileDownload(");
            
            sb.Append("file : String,");
            
            sb.Append("remoteFile : String,");
            
            sb.Append("isDir : bool");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            String file = byteArray.readUTF();
            String remoteFile = byteArray.readUTF();
            bool isDir = byteArray.readBoolean();
            sb.AppendFormat(@"file = ""{0}""",  file);sb.Append(",\r\n");sb.AppendFormat(@"remoteFile = ""{0}""",  remoteFile);sb.Append(",\r\n");sb.AppendFormat(@"isDir = ""{0}""",  isDir);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseFileSendResponse(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("FileSendResponse(");
            
            sb.Append("file : int,");
            
            sb.Append("uploadToken : int");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int file = byteArray.readDynamicsInt();
            int uploadToken = byteArray.readDynamicsInt();
            sb.AppendFormat(@"file = ""{0}""",  file);sb.Append(",\r\n");sb.AppendFormat(@"uploadToken = ""{0}""",  uploadToken);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseSendFinishResponse(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SendFinishResponse(");
            
            sb.Append("file : int,");
            
            sb.Append("totalSize : int,");
            
            sb.Append("expectSize : int,");
            
            sb.Append("md5 : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int file = byteArray.readDynamicsInt();
            int totalSize = byteArray.readDynamicsInt();
            int expectSize = byteArray.readDynamicsInt();
            String md5 = byteArray.readUTF();
            sb.AppendFormat(@"file = ""{0}""",  file);sb.Append(",\r\n");sb.AppendFormat(@"totalSize = ""{0}""",  totalSize);sb.Append(",\r\n");sb.AppendFormat(@"expectSize = ""{0}""",  expectSize);sb.Append(",\r\n");sb.AppendFormat(@"md5 = ""{0}""",  md5);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseFileBlockResponse(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("FileBlockResponse(");
            
            sb.Append("file : int,");
            
            sb.Append("blockId : int");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int file = byteArray.readDynamicsInt();
            int blockId = byteArray.readDynamicsInt();
            sb.AppendFormat(@"file = ""{0}""",  file);sb.Append(",\r\n");sb.AppendFormat(@"blockId = ""{0}""",  blockId);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseCreateDirectoryResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("CreateDirectoryResult(");
            
            sb.Append("result : int,");
            
            sb.Append("desc : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"desc = ""{0}""",  desc);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseListDirectorysResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("ListDirectorysResult(");
            
            sb.Append("result : int,");
            
            sb.Append("directories : StringSequence");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int result = byteArray.readDynamicsInt();
            StringSequence directories = new StringSequence();
			directories.ReadFromByteArray(byteArray);
            sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"directories = ""{0}""",  directories);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseDeleteDirectoryResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("DeleteDirectoryResult(");
            
            sb.Append("result : int,");
            
            sb.Append("desc : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"desc = ""{0}""",  desc);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseDeleteFileResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("DeleteFileResult(");
            
            sb.Append("result : int,");
            
            sb.Append("desc : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"desc = ""{0}""",  desc);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseSetWorkingDirectoryResult(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SetWorkingDirectoryResult(");
            
            sb.Append("result : int,");
            
            sb.Append("desc : string");
            
            sb.Append(")\r\n{\r\n");
            int crc = byteArray.readIntNCRC(); // parse global seq
            int result = byteArray.readDynamicsInt();
            String desc = byteArray.readUTF();
            sb.AppendFormat(@"result = ""{0}""",  result);sb.Append(",\r\n");sb.AppendFormat(@"desc = ""{0}""",  desc);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IFileClientService
    {
        void OnRequestFileDownload( String file, String remoteFile, bool isDir);
        void OnFileSendResponse( int file, int uploadToken);
        void OnSendFinishResponse( int file, int totalSize, int expectSize, string md5);
        void OnFileBlockResponse( int file, int blockId);
        void OnCreateDirectoryResult( int result, string desc);
        void OnListDirectorysResult( int result,ref StringSequence directories);
        void OnDeleteDirectoryResult( int result, string desc);
        void OnDeleteFileResult( int result, string desc);
        void OnSetWorkingDirectoryResult( int result, string desc);
        
    }
  
    #endregion    //SECTION_TRANSACTIONS
    }
    // END OF GENERATED CODE
  