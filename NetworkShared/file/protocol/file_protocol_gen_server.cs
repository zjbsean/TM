//source signature: [D4-D2-43-05-CF-01-AF-B2-92-1F-E1-DE-88-B6-F0-A5]
// Autogenerated at 2016/3/24 14:25:34.
// Created by [CodeGenerator Library:1.7.3.2014.04.20.15.19] FOR Server Protocol.
// Don't manully change this code unless you have to, all changes will be lost next time code is generated.
// Copyright ideadynamo.com 2008.
namespace com.tieao.mmo.deamon.server
{
    using System;
    using System.Text;
    using System.Xml;
    using System.IO;
    using System.Collections;
    using System.Collections.Generic;
    using com.ideadynamo.foundation;
    using com.ideadynamo.foundation.buffer;
    using com.tieao.mmo.deamon;
    
    // set com.tieao.mmo.deamon
    /*Reference Codes
    
    End Reference Codes*/
    #region Service And Interfaces
    
    internal class EnumFileMethods
    {
        
        public const int SERVER_REQUESTFILESEND_HASH = 2083090803;
        public const int SERVER_REQUESTFILEBLOCK_HASH = 105015786;
        public const int SERVER_STARTBATCH_HASH = -825162526;
        public const int SERVER_BATCHCOMPLETE_HASH = -1057594927;
        public const int SERVER_CREATEDIRECTORY_HASH = -519248151;
        public const int SERVER_LISTDIRECTORYS_HASH = -1562808378;
        public const int SERVER_DELETEDIRECTORY_HASH = -229624900;
        public const int SERVER_DELETEFILE_HASH = 1362483483;
        public const int SERVER_SETWORKINGDIRECTORY_HASH = 913806740;
        public const int SERVER_SENDDIRECTORYFAILED_HASH = -1342594702;
        public const int SERVER_SENDFILEFAILED_HASH = 1185080645;
        public const int CLIENT_REQUESTFILEDOWNLOAD_HASH = 2012624783;
        public const int CLIENT_FILESENDRESPONSE_HASH = -31584443;
        public const int CLIENT_SENDFINISHRESPONSE_HASH = -1998973432;
        public const int CLIENT_FILEBLOCKRESPONSE_HASH = 593320382;
        public const int CLIENT_CREATEDIRECTORYRESULT_HASH = -2072428732;
        public const int CLIENT_LISTDIRECTORYSRESULT_HASH = 1856640093;
        public const int CLIENT_DELETEDIRECTORYRESULT_HASH = -695136055;
        public const int CLIENT_DELETEFILERESULT_HASH = -1098610262;
        public const int CLIENT_SETWORKINGDIRECTORYRESULT_HASH = 1821639015;

        public const int CLIENT_REQUESTERROR_HASH = -983351465;
    }
    
    public class  FileServerHelper
    {
        public const string SOURCE_HASH = "D4-D2-43-05-CF-01-AF-B2-92-1F-E1-DE-88-B6-F0-A5";

        
        public static ByteArray RequestFileDownload(String file,String remoteFile,bool isDir)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_REQUESTFILEDOWNLOAD_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_REQUESTFILEDOWNLOAD_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeUTF(file);byteArray.writeUTF(remoteFile);byteArray.writeBoolean(isDir);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray FileSendResponse(int file,int uploadToken)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_FILESENDRESPONSE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_FILESENDRESPONSE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(file);byteArray.writeDynamicsInt(uploadToken);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray SendFinishResponse(int file,int totalSize,int expectSize,string md5)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_SENDFINISHRESPONSE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_SENDFINISHRESPONSE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(file);byteArray.writeDynamicsInt(totalSize);byteArray.writeDynamicsInt(expectSize);byteArray.writeUTF(md5);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray FileBlockResponse(int file,int blockId)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_FILEBLOCKRESPONSE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_FILEBLOCKRESPONSE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(file);byteArray.writeDynamicsInt(blockId);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray CreateDirectoryResult(int result,string desc)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_CREATEDIRECTORYRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_CREATEDIRECTORYRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray ListDirectorysResult(int result,StringSequence directories)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_LISTDIRECTORYSRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_LISTDIRECTORYSRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(result);directories.WriteToByteArray(byteArray);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray DeleteDirectoryResult(int result,string desc)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_DELETEDIRECTORYRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_DELETEDIRECTORYRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray DeleteFileResult(int result,string desc)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_DELETEFILERESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_DELETEFILERESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static ByteArray SetWorkingDirectoryResult(int result,string desc)
        {
            ByteArray byteArray = new ByteArray();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_SETWORKINGDIRECTORYRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_SETWORKINGDIRECTORYRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
          byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
          
          ++ByteArray.globalSeq;
            byteArray.writeInt(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }
        
        public static void RequestFileDownload(String file,String remoteFile,bool isDir,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_REQUESTFILEDOWNLOAD_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_REQUESTFILEDOWNLOAD_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeUTF(file);byteArray.writeUTF(remoteFile);byteArray.writeBoolean(isDir);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void FileSendResponse(int file,int uploadToken,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_FILESENDRESPONSE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_FILESENDRESPONSE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(file);byteArray.writeDynamicsInt(uploadToken);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void SendFinishResponse(int file,int totalSize,int expectSize,string md5,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_SENDFINISHRESPONSE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_SENDFINISHRESPONSE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(file);byteArray.writeDynamicsInt(totalSize);byteArray.writeDynamicsInt(expectSize);byteArray.writeUTF(md5);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void FileBlockResponse(int file,int blockId,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_FILEBLOCKRESPONSE_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_FILEBLOCKRESPONSE_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(file);byteArray.writeDynamicsInt(blockId);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void CreateDirectoryResult(int result,string desc,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_CREATEDIRECTORYRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_CREATEDIRECTORYRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void ListDirectorysResult(int result,StringSequence directories,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_LISTDIRECTORYSRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_LISTDIRECTORYSRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(result);directories.WriteToByteArray(byteArray);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void DeleteDirectoryResult(int result,string desc,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_DELETEDIRECTORYRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_DELETEDIRECTORYRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void DeleteFileResult(int result,string desc,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_DELETEFILERESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_DELETEFILERESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static void SetWorkingDirectoryResult(int result,string desc,ByteArray  byteArray)
        {
            byteArray.Reset();
            byteArray.WriteHeader();
            
            byteArray.writeInt( EnumFileMethods.CLIENT_SETWORKINGDIRECTORYRESULT_HASH );
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_SETWORKINGDIRECTORYRESULT_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(result);byteArray.writeUTF(desc);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
        }
        
        public static ByteArray ClientRequestFailed__(int reason)
        {
            ByteArray byteArray = new ByteArray();
            byteArray.writeInt( EnumFileMethods.CLIENT_REQUESTERROR_HASH);
            byteArray.EncryptKey =  EnumFileMethods.CLIENT_REQUESTERROR_HASH ;
            byteArray.CRC = 0;
            byteArray.writeDynamicsInt(ByteArray.globalSeq);
            byteArray.writeDynamicsInt(reason);
            ++ByteArray.globalSeq;
            byteArray.writeIntNCRC(byteArray.CRC);
            byteArray.EncryptKey =  0;
            return byteArray;
        }

        public static bool IntepretMessage(ByteArray byteArray,IFileServerService serverService)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            bool mtdrst__ = false;
            switch(methodID)
            {
              
              case EnumFileMethods.SERVER_REQUESTFILESEND_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_REQUESTFILESEND_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnRequestFileSend(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_REQUESTFILEBLOCK_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_REQUESTFILEBLOCK_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnRequestFileBlock(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_STARTBATCH_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_STARTBATCH_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnStartBatch(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_BATCHCOMPLETE_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_BATCHCOMPLETE_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnBatchComplete(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_CREATEDIRECTORY_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_CREATEDIRECTORY_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnCreateDirectory(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_LISTDIRECTORYS_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_LISTDIRECTORYS_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnListDirectorys(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_DELETEDIRECTORY_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_DELETEDIRECTORY_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnDeleteDirectory(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_DELETEFILE_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_DELETEFILE_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnDeleteFile(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_SETWORKINGDIRECTORY_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_SETWORKINGDIRECTORY_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnSetWorkingDirectory(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_SENDDIRECTORYFAILED_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_SENDDIRECTORYFAILED_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnSendDirectoryFailed(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.SERVER_SENDFILEFAILED_HASH: 
              {
                  byteArray.EncryptKey = EnumFileMethods.SERVER_SENDFILEFAILED_HASH;
                  byteArray.CRC = 0;
                  byteArray.readDynamicsInt();

                  mtdrst__ = OnSendFileFailed(byteArray , serverService);
                  byteArray.EncryptKey =  0;
                  return mtdrst__;
              }
              
              case EnumFileMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumFileMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                OnClientRequestError__(byteArray , serverService);
                byteArray.EncryptKey = 0;
                return true;
            }
            
            // recover the header
            byteArray.Rewind();
            return false;
        }

        public static String ParseMessage(ByteArray byteArray , ParamedDelegate<String> dumper)
        {
            byteArray.BypassHeader();
            int methodID = byteArray.readInt();
            String result = String.Empty;
            switch(methodID)
            {
            
            case EnumFileMethods.SERVER_REQUESTFILESEND_HASH: 
                result = ParseRequestFileSend(byteArray); 
                break;
            case EnumFileMethods.SERVER_REQUESTFILEBLOCK_HASH: 
                result = ParseRequestFileBlock(byteArray); 
                break;
            case EnumFileMethods.SERVER_STARTBATCH_HASH: 
                result = ParseStartBatch(byteArray); 
                break;
            case EnumFileMethods.SERVER_BATCHCOMPLETE_HASH: 
                result = ParseBatchComplete(byteArray); 
                break;
            case EnumFileMethods.SERVER_CREATEDIRECTORY_HASH: 
                result = ParseCreateDirectory(byteArray); 
                break;
            case EnumFileMethods.SERVER_LISTDIRECTORYS_HASH: 
                result = ParseListDirectorys(byteArray); 
                break;
            case EnumFileMethods.SERVER_DELETEDIRECTORY_HASH: 
                result = ParseDeleteDirectory(byteArray); 
                break;
            case EnumFileMethods.SERVER_DELETEFILE_HASH: 
                result = ParseDeleteFile(byteArray); 
                break;
            case EnumFileMethods.SERVER_SETWORKINGDIRECTORY_HASH: 
                result = ParseSetWorkingDirectory(byteArray); 
                break;
            case EnumFileMethods.SERVER_SENDDIRECTORYFAILED_HASH: 
                result = ParseSendDirectoryFailed(byteArray); 
                break;
            case EnumFileMethods.SERVER_SENDFILEFAILED_HASH: 
                result = ParseSendFileFailed(byteArray); 
                break;               
            case EnumFileMethods.CLIENT_REQUESTERROR_HASH:
                byteArray.EncryptKey =  EnumFileMethods.CLIENT_REQUESTERROR_HASH ;
                byteArray.readDynamicsInt();
                int reason = byteArray.readDynamicsInt();
                byteArray.EncryptKey = 0;
                return string.Format("Client Request Error {0}" ,reason);
            }
            if(result != String.Empty) dumper(result);
            // recover the header
            byteArray.Rewind();
            return result;
        }

        
        private static bool OnRequestFileSend(ByteArray byteArray,IFileServerService serverService)
        {
            String file = byteArray.readUTF();
            int uploadToken = byteArray.readDynamicsInt();
            int size = byteArray.readDynamicsInt();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnRequestFileSend( file, uploadToken, size);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnRequestFileBlock(ByteArray byteArray,IFileServerService serverService)
        {
            String file = byteArray.readUTF();
            int blockId = byteArray.readDynamicsInt();
            int size = byteArray.readDynamicsInt();
            ByteArray stream = ByteArray.SReadFromByteArray(byteArray);
            int special = byteArray.readDynamicsInt();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnRequestFileBlock( file, blockId, size,ref stream, special);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnStartBatch(ByteArray byteArray,IFileServerService serverService)
        {
            String name = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnStartBatch( name);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnBatchComplete(ByteArray byteArray,IFileServerService serverService)
        {
            bool success = byteArray.readBoolean();
            String name = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnBatchComplete( success, name);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnCreateDirectory(ByteArray byteArray,IFileServerService serverService)
        {
            String name = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnCreateDirectory( name);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnListDirectorys(ByteArray byteArray,IFileServerService serverService)
        {
            String name = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnListDirectorys( name);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnDeleteDirectory(ByteArray byteArray,IFileServerService serverService)
        {
            String name = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnDeleteDirectory( name);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnDeleteFile(ByteArray byteArray,IFileServerService serverService)
        {
            String name = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnDeleteFile( name);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnSetWorkingDirectory(ByteArray byteArray,IFileServerService serverService)
        {
            String name = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnSetWorkingDirectory( name);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnSendDirectoryFailed(ByteArray byteArray,IFileServerService serverService)
        {
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnSendDirectoryFailed();
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnSendFileFailed(ByteArray byteArray,IFileServerService serverService)
        {
            String name = byteArray.readUTF();
            String reason = byteArray.readUTF();
            
            int crc = byteArray.readIntNCRC();
            if(crc == byteArray.CRC)
            {
            serverService.OnSendFileFailed( name, reason);
            }
            byteArray.Recycle();
            return true;
        }
        
        private static bool OnClientRequestError__(ByteArray byteArray , IFileServerService serverService)
        {
            int errorCode = byteArray.readDynamicsInt();
            if(ClientRequestErrorHandler__ != null)
            {
                ClientRequestErrorHandler__(errorCode);
            }
            return true;
        }
        
        private static string ParseRequestFileSend(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("RequestFileSend(");
            
            sb.Append("file : String,");
            
            sb.Append("uploadToken : int,");
            
            sb.Append("size : int");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String file = byteArray.readUTF();
            int uploadToken = byteArray.readDynamicsInt();
            int size = byteArray.readDynamicsInt();
            sb.AppendFormat(@"file = ""{0}""",  file);sb.Append(",\r\n");sb.AppendFormat(@"uploadToken = ""{0}""",  uploadToken);sb.Append(",\r\n");sb.AppendFormat(@"size = ""{0}""",  size);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseRequestFileBlock(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("RequestFileBlock(");
            
            sb.Append("file : String,");
            
            sb.Append("blockId : int,");
            
            sb.Append("size : int,");
            
            sb.Append("stream : ByteArray,");
            
            sb.Append("special : int");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String file = byteArray.readUTF();
            int blockId = byteArray.readDynamicsInt();
            int size = byteArray.readDynamicsInt();
            ByteArray stream = ByteArray.SReadFromByteArray(byteArray);
            int special = byteArray.readDynamicsInt();
            sb.AppendFormat(@"file = ""{0}""",  file);sb.Append(",\r\n");sb.AppendFormat(@"blockId = ""{0}""",  blockId);sb.Append(",\r\n");sb.AppendFormat(@"size = ""{0}""",  size);sb.Append(",\r\n");sb.AppendFormat(@"stream = ""{0}""",  stream);sb.Append(",\r\n");sb.AppendFormat(@"special = ""{0}""",  special);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseStartBatch(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("StartBatch(");
            
            sb.Append("name : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String name = byteArray.readUTF();
            sb.AppendFormat(@"name = ""{0}""",  name);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseBatchComplete(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("BatchComplete(");
            
            sb.Append("success : bool,");
            
            sb.Append("name : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            bool success = byteArray.readBoolean();
            String name = byteArray.readUTF();
            sb.AppendFormat(@"success = ""{0}""",  success);sb.Append(",\r\n");sb.AppendFormat(@"name = ""{0}""",  name);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseCreateDirectory(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("CreateDirectory(");
            
            sb.Append("name : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String name = byteArray.readUTF();
            sb.AppendFormat(@"name = ""{0}""",  name);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseListDirectorys(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("ListDirectorys(");
            
            sb.Append("name : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String name = byteArray.readUTF();
            sb.AppendFormat(@"name = ""{0}""",  name);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseDeleteDirectory(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("DeleteDirectory(");
            
            sb.Append("name : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String name = byteArray.readUTF();
            sb.AppendFormat(@"name = ""{0}""",  name);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseDeleteFile(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("DeleteFile(");
            
            sb.Append("name : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String name = byteArray.readUTF();
            sb.AppendFormat(@"name = ""{0}""",  name);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseSetWorkingDirectory(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SetWorkingDirectory(");
            
            sb.Append("name : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String name = byteArray.readUTF();
            sb.AppendFormat(@"name = ""{0}""",  name);
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseSendDirectoryFailed(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SendDirectoryFailed(");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            
            sb.Append("}");
            return sb.ToString();
        }
        
        private static string ParseSendFileFailed(ByteArray byteArray)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("SendFileFailed(");
            
            sb.Append("name : string,");
            
            sb.Append("reason : string");
            
            sb.Append("){\r\n");
            int crc__ = byteArray.readIntNCRC(); // parse global seq
            String name = byteArray.readUTF();
            String reason = byteArray.readUTF();
            sb.AppendFormat(@"name = ""{0}""",  name);sb.Append(",\r\n");sb.AppendFormat(@"reason = ""{0}""",  reason);
            sb.Append("}");
            return sb.ToString();
        }
        
        
        public delegate void ClientRequestErrorDelegate__(int errorCode);
        public static ClientRequestErrorDelegate__ ClientRequestErrorHandler__;
   }

    public interface IFileServerService
    {
        void OnRequestFileSend( String file, int uploadToken, int size);
        void OnRequestFileBlock( String file, int blockId, int size,ref ByteArray stream, int special);
        void OnStartBatch( string name);
        void OnBatchComplete( bool success, string name);
        void OnCreateDirectory( string name);
        void OnListDirectorys( string name);
        void OnDeleteDirectory( string name);
        void OnDeleteFile( string name);
        void OnSetWorkingDirectory( string name);
        void OnSendDirectoryFailed();
        void OnSendFileFailed( string name, string reason);
        
    }
  
    #endregion    //SECTION_TRANSACTIONS
}
// END OF GENERATED CODE
  